#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=4.0.30319.17929.
// 
using namespace System;
ref class NewDataSet;


/// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
[System::Serializable, 
System::ComponentModel::DesignerCategoryAttribute(L"code"), 
System::ComponentModel::ToolboxItem(true), 
System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
System::Xml::Serialization::XmlRootAttribute(L"NewDataSet"), 
System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
public ref class NewDataSet : public ::System::Data::DataSet {
    public : ref class EXMLDataTable;
    public : ref class definesDataTable;
    public : ref class experimentDataTable;
    public : ref class declarationsDataTable;
    public : ref class objectDataTable;
    public : ref class definitionsDataTable;
    public : ref class definitionDataTable;
    public : ref class connectionsDataTable;
    public : ref class connectionDataTable;
    public : ref class sourceDataTable;
    public : ref class targetDataTable;
    public : ref class initializationsDataTable;
    public : ref class initializationDataTable;
    public : ref class actionsDataTable;
    public : ref class blocksDataTable;
    public : ref class blockDataTable;
    public : ref class loopsDataTable;
    public : ref class loopDataTable;
    public : ref class finalizationsDataTable;
    public : ref class finalizationDataTable;
    public : ref class EXMLRow;
    public : ref class definesRow;
    public : ref class experimentRow;
    public : ref class declarationsRow;
    public : ref class objectRow;
    public : ref class definitionsRow;
    public : ref class definitionRow;
    public : ref class connectionsRow;
    public : ref class connectionRow;
    public : ref class sourceRow;
    public : ref class targetRow;
    public : ref class initializationsRow;
    public : ref class initializationRow;
    public : ref class actionsRow;
    public : ref class blocksRow;
    public : ref class blockRow;
    public : ref class loopsRow;
    public : ref class loopRow;
    public : ref class finalizationsRow;
    public : ref class finalizationRow;
    public : ref class EXMLRowChangeEvent;
    public : ref class definesRowChangeEvent;
    public : ref class experimentRowChangeEvent;
    public : ref class declarationsRowChangeEvent;
    public : ref class objectRowChangeEvent;
    public : ref class definitionsRowChangeEvent;
    public : ref class definitionRowChangeEvent;
    public : ref class connectionsRowChangeEvent;
    public : ref class connectionRowChangeEvent;
    public : ref class sourceRowChangeEvent;
    public : ref class targetRowChangeEvent;
    public : ref class initializationsRowChangeEvent;
    public : ref class initializationRowChangeEvent;
    public : ref class actionsRowChangeEvent;
    public : ref class blocksRowChangeEvent;
    public : ref class blockRowChangeEvent;
    public : ref class loopsRowChangeEvent;
    public : ref class loopRowChangeEvent;
    public : ref class finalizationsRowChangeEvent;
    public : ref class finalizationRowChangeEvent;
    
    private: NewDataSet::EXMLDataTable^  tableEXML;
    
    private: NewDataSet::definesDataTable^  tabledefines;
    
    private: NewDataSet::experimentDataTable^  tableexperiment;
    
    private: NewDataSet::declarationsDataTable^  tabledeclarations;
    
    private: NewDataSet::objectDataTable^  tableobject;
    
    private: NewDataSet::definitionsDataTable^  tabledefinitions;
    
    private: NewDataSet::definitionDataTable^  tabledefinition;
    
    private: NewDataSet::connectionsDataTable^  tableconnections;
    
    private: NewDataSet::connectionDataTable^  tableconnection;
    
    private: NewDataSet::sourceDataTable^  tablesource;
    
    private: NewDataSet::targetDataTable^  tabletarget;
    
    private: NewDataSet::initializationsDataTable^  tableinitializations;
    
    private: NewDataSet::initializationDataTable^  tableinitialization;
    
    private: NewDataSet::actionsDataTable^  tableactions;
    
    private: NewDataSet::blocksDataTable^  tableblocks;
    
    private: NewDataSet::blockDataTable^  tableblock;
    
    private: NewDataSet::loopsDataTable^  tableloops;
    
    private: NewDataSet::loopDataTable^  tableloop;
    
    private: NewDataSet::finalizationsDataTable^  tablefinalizations;
    
    private: NewDataSet::finalizationDataTable^  tablefinalization;
    
    private: ::System::Data::DataRelation^  relationEXML_defines;
    
    private: ::System::Data::DataRelation^  relationdefines_experiment;
    
    private: ::System::Data::DataRelation^  relationEXML_declarations;
    
    private: ::System::Data::DataRelation^  relationdeclarations_object;
    
    private: ::System::Data::DataRelation^  relationinitialization_object;
    
    private: ::System::Data::DataRelation^  relationblock_object;
    
    private: ::System::Data::DataRelation^  relationfinalization_object;
    
    private: ::System::Data::DataRelation^  relationobject_definitions;
    
    private: ::System::Data::DataRelation^  relationdefinitions_definition;
    
    private: ::System::Data::DataRelation^  relationEXML_connections;
    
    private: ::System::Data::DataRelation^  relationconnections_connection;
    
    private: ::System::Data::DataRelation^  relationconnection_source;
    
    private: ::System::Data::DataRelation^  relationconnection_target;
    
    private: ::System::Data::DataRelation^  relationEXML_initializations;
    
    private: ::System::Data::DataRelation^  relationinitializations_initialization;
    
    private: ::System::Data::DataRelation^  relationEXML_actions;
    
    private: ::System::Data::DataRelation^  relationactions_blocks;
    
    private: ::System::Data::DataRelation^  relationblocks_block;
    
    private: ::System::Data::DataRelation^  relationblock_loops;
    
    private: ::System::Data::DataRelation^  relationloops_loop;
    
    private: ::System::Data::DataRelation^  relationEXML_finalizations;
    
    private: ::System::Data::DataRelation^  relationfinalizations_finalization;
    
    private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void EXMLRowChangeEventHandler(::System::Object^  sender, NewDataSet::EXMLRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void definesRowChangeEventHandler(::System::Object^  sender, NewDataSet::definesRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void experimentRowChangeEventHandler(::System::Object^  sender, NewDataSet::experimentRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void declarationsRowChangeEventHandler(::System::Object^  sender, NewDataSet::declarationsRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void objectRowChangeEventHandler(::System::Object^  sender, NewDataSet::objectRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void definitionsRowChangeEventHandler(::System::Object^  sender, NewDataSet::definitionsRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void definitionRowChangeEventHandler(::System::Object^  sender, NewDataSet::definitionRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void connectionsRowChangeEventHandler(::System::Object^  sender, NewDataSet::connectionsRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void connectionRowChangeEventHandler(::System::Object^  sender, NewDataSet::connectionRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void sourceRowChangeEventHandler(::System::Object^  sender, NewDataSet::sourceRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void targetRowChangeEventHandler(::System::Object^  sender, NewDataSet::targetRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void initializationsRowChangeEventHandler(::System::Object^  sender, NewDataSet::initializationsRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void initializationRowChangeEventHandler(::System::Object^  sender, NewDataSet::initializationRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void actionsRowChangeEventHandler(::System::Object^  sender, NewDataSet::actionsRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void blocksRowChangeEventHandler(::System::Object^  sender, NewDataSet::blocksRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void blockRowChangeEventHandler(::System::Object^  sender, NewDataSet::blockRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void loopsRowChangeEventHandler(::System::Object^  sender, NewDataSet::loopsRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void loopRowChangeEventHandler(::System::Object^  sender, NewDataSet::loopRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void finalizationsRowChangeEventHandler(::System::Object^  sender, NewDataSet::finalizationsRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void finalizationRowChangeEventHandler(::System::Object^  sender, NewDataSet::finalizationRowChangeEvent^  e);
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    NewDataSet();
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::EXMLDataTable^  EXML {
        NewDataSet::EXMLDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::definesDataTable^  defines {
        NewDataSet::definesDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::experimentDataTable^  experiment {
        NewDataSet::experimentDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::declarationsDataTable^  declarations {
        NewDataSet::declarationsDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::objectDataTable^  object {
        NewDataSet::objectDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::definitionsDataTable^  definitions {
        NewDataSet::definitionsDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::definitionDataTable^  definition {
        NewDataSet::definitionDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::connectionsDataTable^  connections {
        NewDataSet::connectionsDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::connectionDataTable^  connection {
        NewDataSet::connectionDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::sourceDataTable^  source {
        NewDataSet::sourceDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::targetDataTable^  target {
        NewDataSet::targetDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::initializationsDataTable^  initializations {
        NewDataSet::initializationsDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::initializationDataTable^  initialization {
        NewDataSet::initializationDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::actionsDataTable^  actions {
        NewDataSet::actionsDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::blocksDataTable^  blocks {
        NewDataSet::blocksDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::blockDataTable^  block {
        NewDataSet::blockDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::loopsDataTable^  loops {
        NewDataSet::loopsDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::loopDataTable^  loop {
        NewDataSet::loopDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::finalizationsDataTable^  finalizations {
        NewDataSet::finalizationsDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::finalizationDataTable^  finalization {
        NewDataSet::finalizationDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::BrowsableAttribute(true), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
    virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
        ::System::Data::SchemaSerializationMode get() override;
        System::Void set(::System::Data::SchemaSerializationMode value) override;
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
    property ::System::Data::DataTableCollection^  Tables {
        ::System::Data::DataTableCollection^  get() new;
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
    property ::System::Data::DataRelationCollection^  Relations {
        ::System::Data::DataRelationCollection^  get() new;
    }
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Void InitializeDerivedDataSet() override;
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Data::DataSet^  Clone() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Boolean ShouldSerializeTables() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Boolean ShouldSerializeRelations() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
    
    internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitVars();
    
    internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitVars(::System::Boolean initTable);
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitClass();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeEXML();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializedefines();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeexperiment();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializedeclarations();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeobject();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializedefinitions();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializedefinition();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeconnections();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeconnection();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializesource();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializetarget();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeinitializations();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeinitialization();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeactions();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeblocks();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeblock();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeloops();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeloop();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializefinalizations();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializefinalization();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class EXMLDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnversion;
        
        private: ::System::Data::DataColumn^  columnEXML_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::EXMLRowChangeEventHandler^  EXMLRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::EXMLRowChangeEventHandler^  EXMLRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::EXMLRowChangeEventHandler^  EXMLRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::EXMLRowChangeEventHandler^  EXMLRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        EXMLDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        EXMLDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        EXMLDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  versionColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  EXML_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::EXMLRow^  default [::System::Int32 ] {
            NewDataSet::EXMLRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddEXMLRow(NewDataSet::EXMLRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::EXMLRow^  AddEXMLRow(System::String^  version);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::EXMLRow^  NewEXMLRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveEXMLRow(NewDataSet::EXMLRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class definesDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columndefines_Id;
        
        private: ::System::Data::DataColumn^  columnEXML_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::definesRowChangeEventHandler^  definesRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::definesRowChangeEventHandler^  definesRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::definesRowChangeEventHandler^  definesRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::definesRowChangeEventHandler^  definesRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        definesDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        definesDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        definesDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  defines_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  EXML_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::definesRow^  default [::System::Int32 ] {
            NewDataSet::definesRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AdddefinesRow(NewDataSet::definesRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::definesRow^  AdddefinesRow(NewDataSet::EXMLRow^  parentEXMLRowByEXML_defines);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::definesRow^  NewdefinesRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovedefinesRow(NewDataSet::definesRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class experimentDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnID;
        
        private: ::System::Data::DataColumn^  columnname;
        
        private: ::System::Data::DataColumn^  columndebugmode;
        
        private: ::System::Data::DataColumn^  columndefines_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::experimentRowChangeEventHandler^  experimentRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::experimentRowChangeEventHandler^  experimentRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::experimentRowChangeEventHandler^  experimentRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::experimentRowChangeEventHandler^  experimentRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        experimentDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        experimentDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        experimentDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  IDColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  nameColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  debugmodeColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  defines_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::experimentRow^  default [::System::Int32 ] {
            NewDataSet::experimentRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddexperimentRow(NewDataSet::experimentRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::experimentRow^  AddexperimentRow(System::Int64 ID, System::String^  name, System::String^  debugmode, 
                    NewDataSet::definesRow^  parentdefinesRowBydefines_experiment);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::experimentRow^  NewexperimentRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveexperimentRow(NewDataSet::experimentRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class declarationsDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columndeclarations_Id;
        
        private: ::System::Data::DataColumn^  columnEXML_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::declarationsRowChangeEventHandler^  declarationsRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::declarationsRowChangeEventHandler^  declarationsRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::declarationsRowChangeEventHandler^  declarationsRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::declarationsRowChangeEventHandler^  declarationsRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        declarationsDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        declarationsDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        declarationsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  declarations_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  EXML_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::declarationsRow^  default [::System::Int32 ] {
            NewDataSet::declarationsRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AdddeclarationsRow(NewDataSet::declarationsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::declarationsRow^  AdddeclarationsRow(NewDataSet::EXMLRow^  parentEXMLRowByEXML_declarations);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::declarationsRow^  NewdeclarationsRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovedeclarationsRow(NewDataSet::declarationsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class objectDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnID;
        
        private: ::System::Data::DataColumn^  column_class;
        
        private: ::System::Data::DataColumn^  columnname;
        
        private: ::System::Data::DataColumn^  columnobject_Id;
        
        private: ::System::Data::DataColumn^  columndeclarations_Id;
        
        private: ::System::Data::DataColumn^  columninitialization_Id;
        
        private: ::System::Data::DataColumn^  columnblock_Id;
        
        private: ::System::Data::DataColumn^  columnfinalization_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::objectRowChangeEventHandler^  objectRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::objectRowChangeEventHandler^  objectRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::objectRowChangeEventHandler^  objectRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::objectRowChangeEventHandler^  objectRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        objectDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        objectDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        objectDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  IDColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _classColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  nameColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  object_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  declarations_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  initialization_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  block_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  finalization_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::objectRow^  default [::System::Int32 ] {
            NewDataSet::objectRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddobjectRow(NewDataSet::objectRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::objectRow^  AddobjectRow(
                    System::Int64 ID, 
                    System::String^  _class, 
                    System::String^  name, 
                    NewDataSet::declarationsRow^  parentdeclarationsRowBydeclarations_object, 
                    NewDataSet::initializationRow^  parentinitializationRowByinitialization_object, 
                    NewDataSet::blockRow^  parentblockRowByblock_object, 
                    NewDataSet::finalizationRow^  parentfinalizationRowByfinalization_object);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::objectRow^  NewobjectRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveobjectRow(NewDataSet::objectRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class definitionsDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columndefinitions_Id;
        
        private: ::System::Data::DataColumn^  columnobject_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::definitionsRowChangeEventHandler^  definitionsRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::definitionsRowChangeEventHandler^  definitionsRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::definitionsRowChangeEventHandler^  definitionsRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::definitionsRowChangeEventHandler^  definitionsRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        definitionsDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        definitionsDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        definitionsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  definitions_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  object_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::definitionsRow^  default [::System::Int32 ] {
            NewDataSet::definitionsRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AdddefinitionsRow(NewDataSet::definitionsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::definitionsRow^  AdddefinitionsRow(NewDataSet::objectRow^  parentobjectRowByobject_definitions);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::definitionsRow^  NewdefinitionsRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovedefinitionsRow(NewDataSet::definitionsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class definitionDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnID;
        
        private: ::System::Data::DataColumn^  columnfile;
        
        private: ::System::Data::DataColumn^  columndefinitions_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::definitionRowChangeEventHandler^  definitionRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::definitionRowChangeEventHandler^  definitionRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::definitionRowChangeEventHandler^  definitionRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::definitionRowChangeEventHandler^  definitionRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        definitionDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        definitionDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        definitionDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  IDColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  fileColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  definitions_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::definitionRow^  default [::System::Int32 ] {
            NewDataSet::definitionRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AdddefinitionRow(NewDataSet::definitionRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::definitionRow^  AdddefinitionRow(System::Int64 ID, System::String^  file, NewDataSet::definitionsRow^  parentdefinitionsRowBydefinitions_definition);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::definitionRow^  NewdefinitionRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovedefinitionRow(NewDataSet::definitionRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class connectionsDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnconnections_Id;
        
        private: ::System::Data::DataColumn^  columnEXML_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::connectionsRowChangeEventHandler^  connectionsRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::connectionsRowChangeEventHandler^  connectionsRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::connectionsRowChangeEventHandler^  connectionsRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::connectionsRowChangeEventHandler^  connectionsRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        connectionsDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        connectionsDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        connectionsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  connections_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  EXML_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::connectionsRow^  default [::System::Int32 ] {
            NewDataSet::connectionsRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddconnectionsRow(NewDataSet::connectionsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::connectionsRow^  AddconnectionsRow(NewDataSet::EXMLRow^  parentEXMLRowByEXML_connections);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::connectionsRow^  NewconnectionsRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveconnectionsRow(NewDataSet::connectionsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class connectionDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnID;
        
        private: ::System::Data::DataColumn^  columnconnection_Id;
        
        private: ::System::Data::DataColumn^  columnconnections_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::connectionRowChangeEventHandler^  connectionRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::connectionRowChangeEventHandler^  connectionRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::connectionRowChangeEventHandler^  connectionRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::connectionRowChangeEventHandler^  connectionRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        connectionDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        connectionDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        connectionDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  IDColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  connection_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  connections_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::connectionRow^  default [::System::Int32 ] {
            NewDataSet::connectionRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddconnectionRow(NewDataSet::connectionRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::connectionRow^  AddconnectionRow(System::Int64 ID, NewDataSet::connectionsRow^  parentconnectionsRowByconnections_connection);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::connectionRow^  NewconnectionRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveconnectionRow(NewDataSet::connectionRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class sourceDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnobject;
        
        private: ::System::Data::DataColumn^  columntype;
        
        private: ::System::Data::DataColumn^  columnsignature;
        
        private: ::System::Data::DataColumn^  columnconnection_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::sourceRowChangeEventHandler^  sourceRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::sourceRowChangeEventHandler^  sourceRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::sourceRowChangeEventHandler^  sourceRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::sourceRowChangeEventHandler^  sourceRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        sourceDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        sourceDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        sourceDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  objectColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  typeColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  signatureColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  connection_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::sourceRow^  default [::System::Int32 ] {
            NewDataSet::sourceRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddsourceRow(NewDataSet::sourceRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::sourceRow^  AddsourceRow(System::Int64 object, System::String^  type, System::String^  signature, NewDataSet::connectionRow^  parentconnectionRowByconnection_source);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::sourceRow^  NewsourceRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovesourceRow(NewDataSet::sourceRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class targetDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnobject;
        
        private: ::System::Data::DataColumn^  columntype;
        
        private: ::System::Data::DataColumn^  columnsignature;
        
        private: ::System::Data::DataColumn^  columnconnection_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::targetRowChangeEventHandler^  targetRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::targetRowChangeEventHandler^  targetRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::targetRowChangeEventHandler^  targetRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::targetRowChangeEventHandler^  targetRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        targetDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        targetDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        targetDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  objectColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  typeColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  signatureColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  connection_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::targetRow^  default [::System::Int32 ] {
            NewDataSet::targetRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddtargetRow(NewDataSet::targetRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::targetRow^  AddtargetRow(System::Int64 object, System::String^  type, System::String^  signature, NewDataSet::connectionRow^  parentconnectionRowByconnection_target);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::targetRow^  NewtargetRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovetargetRow(NewDataSet::targetRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class initializationsDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columninitializations_Id;
        
        private: ::System::Data::DataColumn^  columnEXML_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::initializationsRowChangeEventHandler^  initializationsRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::initializationsRowChangeEventHandler^  initializationsRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::initializationsRowChangeEventHandler^  initializationsRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::initializationsRowChangeEventHandler^  initializationsRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        initializationsDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        initializationsDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        initializationsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  initializations_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  EXML_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::initializationsRow^  default [::System::Int32 ] {
            NewDataSet::initializationsRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddinitializationsRow(NewDataSet::initializationsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::initializationsRow^  AddinitializationsRow(NewDataSet::EXMLRow^  parentEXMLRowByEXML_initializations);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::initializationsRow^  NewinitializationsRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveinitializationsRow(NewDataSet::initializationsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class initializationDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnID;
        
        private: ::System::Data::DataColumn^  columninitialization_Id;
        
        private: ::System::Data::DataColumn^  columninitializations_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::initializationRowChangeEventHandler^  initializationRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::initializationRowChangeEventHandler^  initializationRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::initializationRowChangeEventHandler^  initializationRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::initializationRowChangeEventHandler^  initializationRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        initializationDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        initializationDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        initializationDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  IDColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  initialization_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  initializations_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::initializationRow^  default [::System::Int32 ] {
            NewDataSet::initializationRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddinitializationRow(NewDataSet::initializationRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::initializationRow^  AddinitializationRow(System::Int64 ID, NewDataSet::initializationsRow^  parentinitializationsRowByinitializations_initialization);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::initializationRow^  NewinitializationRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveinitializationRow(NewDataSet::initializationRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class actionsDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnactions_Id;
        
        private: ::System::Data::DataColumn^  columnEXML_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::actionsRowChangeEventHandler^  actionsRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::actionsRowChangeEventHandler^  actionsRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::actionsRowChangeEventHandler^  actionsRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::actionsRowChangeEventHandler^  actionsRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        actionsDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        actionsDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        actionsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  actions_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  EXML_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::actionsRow^  default [::System::Int32 ] {
            NewDataSet::actionsRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddactionsRow(NewDataSet::actionsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::actionsRow^  AddactionsRow(NewDataSet::EXMLRow^  parentEXMLRowByEXML_actions);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::actionsRow^  NewactionsRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveactionsRow(NewDataSet::actionsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class blocksDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnblocks_Id;
        
        private: ::System::Data::DataColumn^  columnactions_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::blocksRowChangeEventHandler^  blocksRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::blocksRowChangeEventHandler^  blocksRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::blocksRowChangeEventHandler^  blocksRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::blocksRowChangeEventHandler^  blocksRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        blocksDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        blocksDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        blocksDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  blocks_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  actions_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::blocksRow^  default [::System::Int32 ] {
            NewDataSet::blocksRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddblocksRow(NewDataSet::blocksRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::blocksRow^  AddblocksRow(NewDataSet::actionsRow^  parentactionsRowByactions_blocks);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::blocksRow^  NewblocksRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveblocksRow(NewDataSet::blocksRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class blockDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnID;
        
        private: ::System::Data::DataColumn^  columnname;
        
        private: ::System::Data::DataColumn^  columnblock_number;
        
        private: ::System::Data::DataColumn^  columnnr_of_trials;
        
        private: ::System::Data::DataColumn^  columnnr_of_internal_triggers;
        
        private: ::System::Data::DataColumn^  columnnr_of_external_triggers;
        
        private: ::System::Data::DataColumn^  columnblock_Id;
        
        private: ::System::Data::DataColumn^  columnblocks_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::blockRowChangeEventHandler^  blockRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::blockRowChangeEventHandler^  blockRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::blockRowChangeEventHandler^  blockRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::blockRowChangeEventHandler^  blockRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        blockDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        blockDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        blockDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  IDColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  nameColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  block_numberColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  nr_of_trialsColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  nr_of_internal_triggersColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  nr_of_external_triggersColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  block_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  blocks_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::blockRow^  default [::System::Int32 ] {
            NewDataSet::blockRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddblockRow(NewDataSet::blockRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::blockRow^  AddblockRow(
                    System::Int64 ID, 
                    System::String^  name, 
                    System::Int64 block_number, 
                    System::Int64 nr_of_trials, 
                    System::Int64 nr_of_internal_triggers, 
                    System::Int64 nr_of_external_triggers, 
                    NewDataSet::blocksRow^  parentblocksRowByblocks_block);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::blockRow^  NewblockRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveblockRow(NewDataSet::blockRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class loopsDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnloops_Id;
        
        private: ::System::Data::DataColumn^  columnblock_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::loopsRowChangeEventHandler^  loopsRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::loopsRowChangeEventHandler^  loopsRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::loopsRowChangeEventHandler^  loopsRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::loopsRowChangeEventHandler^  loopsRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        loopsDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        loopsDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        loopsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  loops_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  block_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::loopsRow^  default [::System::Int32 ] {
            NewDataSet::loopsRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddloopsRow(NewDataSet::loopsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::loopsRow^  AddloopsRow(NewDataSet::blockRow^  parentblockRowByblock_loops);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::loopsRow^  NewloopsRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveloopsRow(NewDataSet::loopsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class loopDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnID;
        
        private: ::System::Data::DataColumn^  columnname;
        
        private: ::System::Data::DataColumn^  columnloop_number;
        
        private: ::System::Data::DataColumn^  columnnr_of_loops;
        
        private: ::System::Data::DataColumn^  columntarget_block;
        
        private: ::System::Data::DataColumn^  columnloops_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::loopRowChangeEventHandler^  loopRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::loopRowChangeEventHandler^  loopRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::loopRowChangeEventHandler^  loopRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::loopRowChangeEventHandler^  loopRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        loopDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        loopDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        loopDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  IDColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  nameColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  loop_numberColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  nr_of_loopsColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  target_blockColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  loops_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::loopRow^  default [::System::Int32 ] {
            NewDataSet::loopRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddloopRow(NewDataSet::loopRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::loopRow^  AddloopRow(
                    System::Int64 ID, 
                    System::String^  name, 
                    System::Int64 loop_number, 
                    System::Int64 nr_of_loops, 
                    System::Int64 target_block, 
                    NewDataSet::loopsRow^  parentloopsRowByloops_loop);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::loopRow^  NewloopRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveloopRow(NewDataSet::loopRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class finalizationsDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnfinalizations_Id;
        
        private: ::System::Data::DataColumn^  columnEXML_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::finalizationsRowChangeEventHandler^  finalizationsRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::finalizationsRowChangeEventHandler^  finalizationsRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::finalizationsRowChangeEventHandler^  finalizationsRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::finalizationsRowChangeEventHandler^  finalizationsRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        finalizationsDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        finalizationsDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        finalizationsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  finalizations_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  EXML_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::finalizationsRow^  default [::System::Int32 ] {
            NewDataSet::finalizationsRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddfinalizationsRow(NewDataSet::finalizationsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::finalizationsRow^  AddfinalizationsRow(NewDataSet::EXMLRow^  parentEXMLRowByEXML_finalizations);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::finalizationsRow^  NewfinalizationsRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovefinalizationsRow(NewDataSet::finalizationsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class finalizationDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnID;
        
        private: ::System::Data::DataColumn^  columnfinalization_Id;
        
        private: ::System::Data::DataColumn^  columnfinalizations_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::finalizationRowChangeEventHandler^  finalizationRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::finalizationRowChangeEventHandler^  finalizationRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::finalizationRowChangeEventHandler^  finalizationRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::finalizationRowChangeEventHandler^  finalizationRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        finalizationDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        finalizationDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        finalizationDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  IDColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  finalization_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  finalizations_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::finalizationRow^  default [::System::Int32 ] {
            NewDataSet::finalizationRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddfinalizationRow(NewDataSet::finalizationRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::finalizationRow^  AddfinalizationRow(System::Int64 ID, NewDataSet::finalizationsRow^  parentfinalizationsRowByfinalizations_finalization);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::finalizationRow^  NewfinalizationRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovefinalizationRow(NewDataSet::finalizationRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class EXMLRow : public ::System::Data::DataRow {
        
        private: NewDataSet::EXMLDataTable^  tableEXML;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        EXMLRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  version {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 EXML_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsversionNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetversionNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::definesRow^  >^  GetdefinesRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::declarationsRow^  >^  GetdeclarationsRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::connectionsRow^  >^  GetconnectionsRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::initializationsRow^  >^  GetinitializationsRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::actionsRow^  >^  GetactionsRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::finalizationsRow^  >^  GetfinalizationsRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class definesRow : public ::System::Data::DataRow {
        
        private: NewDataSet::definesDataTable^  tabledefines;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        definesRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 defines_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 EXML_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::EXMLRow^  EXMLRow {
            NewDataSet::EXMLRow^  get();
            System::Void set(NewDataSet::EXMLRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsEXML_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetEXML_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::experimentRow^  >^  GetexperimentRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class experimentRow : public ::System::Data::DataRow {
        
        private: NewDataSet::experimentDataTable^  tableexperiment;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        experimentRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 ID {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  name {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  debugmode {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 defines_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::definesRow^  definesRow {
            NewDataSet::definesRow^  get();
            System::Void set(NewDataSet::definesRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsIDNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetIDNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isdefines_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setdefines_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class declarationsRow : public ::System::Data::DataRow {
        
        private: NewDataSet::declarationsDataTable^  tabledeclarations;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        declarationsRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 declarations_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 EXML_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::EXMLRow^  EXMLRow {
            NewDataSet::EXMLRow^  get();
            System::Void set(NewDataSet::EXMLRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsEXML_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetEXML_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::objectRow^  >^  GetobjectRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class objectRow : public ::System::Data::DataRow {
        
        private: NewDataSet::objectDataTable^  tableobject;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        objectRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 ID {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  _class {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  name {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 object_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 declarations_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 initialization_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 block_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 finalization_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::declarationsRow^  declarationsRow {
            NewDataSet::declarationsRow^  get();
            System::Void set(NewDataSet::declarationsRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::initializationRow^  initializationRow {
            NewDataSet::initializationRow^  get();
            System::Void set(NewDataSet::initializationRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::blockRow^  blockRow {
            NewDataSet::blockRow^  get();
            System::Void set(NewDataSet::blockRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::finalizationRow^  finalizationRow {
            NewDataSet::finalizationRow^  get();
            System::Void set(NewDataSet::finalizationRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsIDNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetIDNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isdeclarations_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setdeclarations_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isinitialization_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setinitialization_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isblock_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setblock_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isfinalization_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setfinalization_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::definitionsRow^  >^  GetdefinitionsRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class definitionsRow : public ::System::Data::DataRow {
        
        private: NewDataSet::definitionsDataTable^  tabledefinitions;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        definitionsRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 definitions_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 object_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::objectRow^  objectRow {
            NewDataSet::objectRow^  get();
            System::Void set(NewDataSet::objectRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isobject_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setobject_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::definitionRow^  >^  GetdefinitionRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class definitionRow : public ::System::Data::DataRow {
        
        private: NewDataSet::definitionDataTable^  tabledefinition;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        definitionRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 ID {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  file {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 definitions_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::definitionsRow^  definitionsRow {
            NewDataSet::definitionsRow^  get();
            System::Void set(NewDataSet::definitionsRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsIDNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetIDNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isdefinitions_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setdefinitions_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class connectionsRow : public ::System::Data::DataRow {
        
        private: NewDataSet::connectionsDataTable^  tableconnections;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        connectionsRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 connections_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 EXML_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::EXMLRow^  EXMLRow {
            NewDataSet::EXMLRow^  get();
            System::Void set(NewDataSet::EXMLRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsEXML_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetEXML_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::connectionRow^  >^  GetconnectionRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class connectionRow : public ::System::Data::DataRow {
        
        private: NewDataSet::connectionDataTable^  tableconnection;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        connectionRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 ID {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 connection_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 connections_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::connectionsRow^  connectionsRow {
            NewDataSet::connectionsRow^  get();
            System::Void set(NewDataSet::connectionsRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsIDNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetIDNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isconnections_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setconnections_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::sourceRow^  >^  GetsourceRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::targetRow^  >^  GettargetRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class sourceRow : public ::System::Data::DataRow {
        
        private: NewDataSet::sourceDataTable^  tablesource;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        sourceRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 object {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  type {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  signature {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 connection_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::connectionRow^  connectionRow {
            NewDataSet::connectionRow^  get();
            System::Void set(NewDataSet::connectionRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isconnection_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setconnection_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class targetRow : public ::System::Data::DataRow {
        
        private: NewDataSet::targetDataTable^  tabletarget;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        targetRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 object {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  type {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  signature {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 connection_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::connectionRow^  connectionRow {
            NewDataSet::connectionRow^  get();
            System::Void set(NewDataSet::connectionRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isconnection_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setconnection_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class initializationsRow : public ::System::Data::DataRow {
        
        private: NewDataSet::initializationsDataTable^  tableinitializations;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        initializationsRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 initializations_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 EXML_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::EXMLRow^  EXMLRow {
            NewDataSet::EXMLRow^  get();
            System::Void set(NewDataSet::EXMLRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsEXML_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetEXML_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::initializationRow^  >^  GetinitializationRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class initializationRow : public ::System::Data::DataRow {
        
        private: NewDataSet::initializationDataTable^  tableinitialization;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        initializationRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 ID {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 initialization_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 initializations_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::initializationsRow^  initializationsRow {
            NewDataSet::initializationsRow^  get();
            System::Void set(NewDataSet::initializationsRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsIDNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetIDNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isinitializations_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setinitializations_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::objectRow^  >^  GetobjectRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class actionsRow : public ::System::Data::DataRow {
        
        private: NewDataSet::actionsDataTable^  tableactions;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        actionsRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 actions_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 EXML_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::EXMLRow^  EXMLRow {
            NewDataSet::EXMLRow^  get();
            System::Void set(NewDataSet::EXMLRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsEXML_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetEXML_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::blocksRow^  >^  GetblocksRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class blocksRow : public ::System::Data::DataRow {
        
        private: NewDataSet::blocksDataTable^  tableblocks;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        blocksRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 blocks_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 actions_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::actionsRow^  actionsRow {
            NewDataSet::actionsRow^  get();
            System::Void set(NewDataSet::actionsRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isactions_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setactions_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::blockRow^  >^  GetblockRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class blockRow : public ::System::Data::DataRow {
        
        private: NewDataSet::blockDataTable^  tableblock;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        blockRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 ID {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  name {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 block_number {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 nr_of_trials {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 nr_of_internal_triggers {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 nr_of_external_triggers {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 block_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 blocks_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::blocksRow^  blocksRow {
            NewDataSet::blocksRow^  get();
            System::Void set(NewDataSet::blocksRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsIDNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetIDNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isblocks_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setblocks_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::objectRow^  >^  GetobjectRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::loopsRow^  >^  GetloopsRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class loopsRow : public ::System::Data::DataRow {
        
        private: NewDataSet::loopsDataTable^  tableloops;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        loopsRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 loops_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 block_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::blockRow^  blockRow {
            NewDataSet::blockRow^  get();
            System::Void set(NewDataSet::blockRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isblock_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setblock_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::loopRow^  >^  GetloopRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class loopRow : public ::System::Data::DataRow {
        
        private: NewDataSet::loopDataTable^  tableloop;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        loopRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 ID {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  name {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 loop_number {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 nr_of_loops {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 target_block {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 loops_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::loopsRow^  loopsRow {
            NewDataSet::loopsRow^  get();
            System::Void set(NewDataSet::loopsRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsIDNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetIDNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isloops_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setloops_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class finalizationsRow : public ::System::Data::DataRow {
        
        private: NewDataSet::finalizationsDataTable^  tablefinalizations;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        finalizationsRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 finalizations_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 EXML_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::EXMLRow^  EXMLRow {
            NewDataSet::EXMLRow^  get();
            System::Void set(NewDataSet::EXMLRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsEXML_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetEXML_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::finalizationRow^  >^  GetfinalizationRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class finalizationRow : public ::System::Data::DataRow {
        
        private: NewDataSet::finalizationDataTable^  tablefinalization;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        finalizationRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 ID {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 finalization_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 finalizations_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::finalizationsRow^  finalizationsRow {
            NewDataSet::finalizationsRow^  get();
            System::Void set(NewDataSet::finalizationsRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsIDNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetIDNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isfinalizations_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setfinalizations_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::objectRow^  >^  GetobjectRows();
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class EXMLRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::EXMLRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        EXMLRowChangeEvent(NewDataSet::EXMLRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::EXMLRow^  Row {
            NewDataSet::EXMLRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class definesRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::definesRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        definesRowChangeEvent(NewDataSet::definesRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::definesRow^  Row {
            NewDataSet::definesRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class experimentRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::experimentRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        experimentRowChangeEvent(NewDataSet::experimentRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::experimentRow^  Row {
            NewDataSet::experimentRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class declarationsRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::declarationsRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        declarationsRowChangeEvent(NewDataSet::declarationsRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::declarationsRow^  Row {
            NewDataSet::declarationsRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class objectRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::objectRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        objectRowChangeEvent(NewDataSet::objectRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::objectRow^  Row {
            NewDataSet::objectRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class definitionsRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::definitionsRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        definitionsRowChangeEvent(NewDataSet::definitionsRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::definitionsRow^  Row {
            NewDataSet::definitionsRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class definitionRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::definitionRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        definitionRowChangeEvent(NewDataSet::definitionRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::definitionRow^  Row {
            NewDataSet::definitionRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class connectionsRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::connectionsRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        connectionsRowChangeEvent(NewDataSet::connectionsRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::connectionsRow^  Row {
            NewDataSet::connectionsRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class connectionRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::connectionRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        connectionRowChangeEvent(NewDataSet::connectionRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::connectionRow^  Row {
            NewDataSet::connectionRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class sourceRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::sourceRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        sourceRowChangeEvent(NewDataSet::sourceRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::sourceRow^  Row {
            NewDataSet::sourceRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class targetRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::targetRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        targetRowChangeEvent(NewDataSet::targetRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::targetRow^  Row {
            NewDataSet::targetRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class initializationsRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::initializationsRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        initializationsRowChangeEvent(NewDataSet::initializationsRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::initializationsRow^  Row {
            NewDataSet::initializationsRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class initializationRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::initializationRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        initializationRowChangeEvent(NewDataSet::initializationRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::initializationRow^  Row {
            NewDataSet::initializationRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class actionsRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::actionsRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        actionsRowChangeEvent(NewDataSet::actionsRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::actionsRow^  Row {
            NewDataSet::actionsRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class blocksRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::blocksRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        blocksRowChangeEvent(NewDataSet::blocksRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::blocksRow^  Row {
            NewDataSet::blocksRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class blockRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::blockRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        blockRowChangeEvent(NewDataSet::blockRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::blockRow^  Row {
            NewDataSet::blockRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class loopsRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::loopsRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        loopsRowChangeEvent(NewDataSet::loopsRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::loopsRow^  Row {
            NewDataSet::loopsRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class loopRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::loopRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        loopRowChangeEvent(NewDataSet::loopRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::loopRow^  Row {
            NewDataSet::loopRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class finalizationsRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::finalizationsRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        finalizationsRowChangeEvent(NewDataSet::finalizationsRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::finalizationsRow^  Row {
            NewDataSet::finalizationsRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class finalizationRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::finalizationRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        finalizationRowChangeEvent(NewDataSet::finalizationRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::finalizationRow^  Row {
            NewDataSet::finalizationRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
};


inline NewDataSet::NewDataSet() {
    this->BeginInit();
    this->InitClass();
    ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &NewDataSet::SchemaChanged);
    __super::Tables->CollectionChanged += schemaChangedHandler;
    __super::Relations->CollectionChanged += schemaChangedHandler;
    this->EndInit();
}

inline NewDataSet::NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataSet(info, context, false) {
    if (this->IsBinarySerialized(info, context) == true) {
        this->InitVars(false);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &NewDataSet::SchemaChanged);
        this->Tables->CollectionChanged += schemaChangedHandler1;
        this->Relations->CollectionChanged += schemaChangedHandler1;
        return;
    }
    ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
    if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
        ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
        ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        if (ds->Tables[L"EXML"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::EXMLDataTable(ds->Tables[L"EXML"])));
        }
        if (ds->Tables[L"defines"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::definesDataTable(ds->Tables[L"defines"])));
        }
        if (ds->Tables[L"experiment"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::experimentDataTable(ds->Tables[L"experiment"])));
        }
        if (ds->Tables[L"declarations"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::declarationsDataTable(ds->Tables[L"declarations"])));
        }
        if (ds->Tables[L"object"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::objectDataTable(ds->Tables[L"object"])));
        }
        if (ds->Tables[L"definitions"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::definitionsDataTable(ds->Tables[L"definitions"])));
        }
        if (ds->Tables[L"definition"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::definitionDataTable(ds->Tables[L"definition"])));
        }
        if (ds->Tables[L"connections"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::connectionsDataTable(ds->Tables[L"connections"])));
        }
        if (ds->Tables[L"connection"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::connectionDataTable(ds->Tables[L"connection"])));
        }
        if (ds->Tables[L"source"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::sourceDataTable(ds->Tables[L"source"])));
        }
        if (ds->Tables[L"target"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::targetDataTable(ds->Tables[L"target"])));
        }
        if (ds->Tables[L"initializations"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::initializationsDataTable(ds->Tables[L"initializations"])));
        }
        if (ds->Tables[L"initialization"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::initializationDataTable(ds->Tables[L"initialization"])));
        }
        if (ds->Tables[L"actions"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::actionsDataTable(ds->Tables[L"actions"])));
        }
        if (ds->Tables[L"blocks"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::blocksDataTable(ds->Tables[L"blocks"])));
        }
        if (ds->Tables[L"block"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::blockDataTable(ds->Tables[L"block"])));
        }
        if (ds->Tables[L"loops"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::loopsDataTable(ds->Tables[L"loops"])));
        }
        if (ds->Tables[L"loop"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::loopDataTable(ds->Tables[L"loop"])));
        }
        if (ds->Tables[L"finalizations"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::finalizationsDataTable(ds->Tables[L"finalizations"])));
        }
        if (ds->Tables[L"finalization"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::finalizationDataTable(ds->Tables[L"finalization"])));
        }
        this->DataSetName = ds->DataSetName;
        this->Prefix = ds->Prefix;
        this->Namespace = ds->Namespace;
        this->Locale = ds->Locale;
        this->CaseSensitive = ds->CaseSensitive;
        this->EnforceConstraints = ds->EnforceConstraints;
        this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
        this->InitVars();
    }
    else {
        this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
    }
    this->GetSerializationData(info, context);
    ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &NewDataSet::SchemaChanged);
    __super::Tables->CollectionChanged += schemaChangedHandler;
    this->Relations->CollectionChanged += schemaChangedHandler;
}

inline NewDataSet::EXMLDataTable^  NewDataSet::EXML::get() {
    return this->tableEXML;
}

inline NewDataSet::definesDataTable^  NewDataSet::defines::get() {
    return this->tabledefines;
}

inline NewDataSet::experimentDataTable^  NewDataSet::experiment::get() {
    return this->tableexperiment;
}

inline NewDataSet::declarationsDataTable^  NewDataSet::declarations::get() {
    return this->tabledeclarations;
}

inline NewDataSet::objectDataTable^  NewDataSet::object::get() {
    return this->tableobject;
}

inline NewDataSet::definitionsDataTable^  NewDataSet::definitions::get() {
    return this->tabledefinitions;
}

inline NewDataSet::definitionDataTable^  NewDataSet::definition::get() {
    return this->tabledefinition;
}

inline NewDataSet::connectionsDataTable^  NewDataSet::connections::get() {
    return this->tableconnections;
}

inline NewDataSet::connectionDataTable^  NewDataSet::connection::get() {
    return this->tableconnection;
}

inline NewDataSet::sourceDataTable^  NewDataSet::source::get() {
    return this->tablesource;
}

inline NewDataSet::targetDataTable^  NewDataSet::target::get() {
    return this->tabletarget;
}

inline NewDataSet::initializationsDataTable^  NewDataSet::initializations::get() {
    return this->tableinitializations;
}

inline NewDataSet::initializationDataTable^  NewDataSet::initialization::get() {
    return this->tableinitialization;
}

inline NewDataSet::actionsDataTable^  NewDataSet::actions::get() {
    return this->tableactions;
}

inline NewDataSet::blocksDataTable^  NewDataSet::blocks::get() {
    return this->tableblocks;
}

inline NewDataSet::blockDataTable^  NewDataSet::block::get() {
    return this->tableblock;
}

inline NewDataSet::loopsDataTable^  NewDataSet::loops::get() {
    return this->tableloops;
}

inline NewDataSet::loopDataTable^  NewDataSet::loop::get() {
    return this->tableloop;
}

inline NewDataSet::finalizationsDataTable^  NewDataSet::finalizations::get() {
    return this->tablefinalizations;
}

inline NewDataSet::finalizationDataTable^  NewDataSet::finalization::get() {
    return this->tablefinalization;
}

inline ::System::Data::SchemaSerializationMode NewDataSet::SchemaSerializationMode::get() {
    return this->_schemaSerializationMode;
}
inline System::Void NewDataSet::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
    this->_schemaSerializationMode = __identifier(value);
}

inline ::System::Data::DataTableCollection^  NewDataSet::Tables::get() {
    return __super::Tables;
}

inline ::System::Data::DataRelationCollection^  NewDataSet::Relations::get() {
    return __super::Relations;
}

inline ::System::Void NewDataSet::InitializeDerivedDataSet() {
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline ::System::Data::DataSet^  NewDataSet::Clone() {
    NewDataSet^  cln = (cli::safe_cast<NewDataSet^  >(__super::Clone()));
    cln->InitVars();
    cln->SchemaSerializationMode = this->SchemaSerializationMode;
    return cln;
}

inline ::System::Boolean NewDataSet::ShouldSerializeTables() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeRelations() {
    return false;
}

inline ::System::Void NewDataSet::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
    if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
        this->Reset();
        ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
        ds->ReadXml(reader);
        if (ds->Tables[L"EXML"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::EXMLDataTable(ds->Tables[L"EXML"])));
        }
        if (ds->Tables[L"defines"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::definesDataTable(ds->Tables[L"defines"])));
        }
        if (ds->Tables[L"experiment"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::experimentDataTable(ds->Tables[L"experiment"])));
        }
        if (ds->Tables[L"declarations"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::declarationsDataTable(ds->Tables[L"declarations"])));
        }
        if (ds->Tables[L"object"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::objectDataTable(ds->Tables[L"object"])));
        }
        if (ds->Tables[L"definitions"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::definitionsDataTable(ds->Tables[L"definitions"])));
        }
        if (ds->Tables[L"definition"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::definitionDataTable(ds->Tables[L"definition"])));
        }
        if (ds->Tables[L"connections"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::connectionsDataTable(ds->Tables[L"connections"])));
        }
        if (ds->Tables[L"connection"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::connectionDataTable(ds->Tables[L"connection"])));
        }
        if (ds->Tables[L"source"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::sourceDataTable(ds->Tables[L"source"])));
        }
        if (ds->Tables[L"target"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::targetDataTable(ds->Tables[L"target"])));
        }
        if (ds->Tables[L"initializations"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::initializationsDataTable(ds->Tables[L"initializations"])));
        }
        if (ds->Tables[L"initialization"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::initializationDataTable(ds->Tables[L"initialization"])));
        }
        if (ds->Tables[L"actions"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::actionsDataTable(ds->Tables[L"actions"])));
        }
        if (ds->Tables[L"blocks"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::blocksDataTable(ds->Tables[L"blocks"])));
        }
        if (ds->Tables[L"block"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::blockDataTable(ds->Tables[L"block"])));
        }
        if (ds->Tables[L"loops"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::loopsDataTable(ds->Tables[L"loops"])));
        }
        if (ds->Tables[L"loop"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::loopDataTable(ds->Tables[L"loop"])));
        }
        if (ds->Tables[L"finalizations"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::finalizationsDataTable(ds->Tables[L"finalizations"])));
        }
        if (ds->Tables[L"finalization"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::finalizationDataTable(ds->Tables[L"finalization"])));
        }
        this->DataSetName = ds->DataSetName;
        this->Prefix = ds->Prefix;
        this->Namespace = ds->Namespace;
        this->Locale = ds->Locale;
        this->CaseSensitive = ds->CaseSensitive;
        this->EnforceConstraints = ds->EnforceConstraints;
        this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
        this->InitVars();
    }
    else {
        this->ReadXml(reader);
        this->InitVars();
    }
}

inline ::System::Xml::Schema::XmlSchema^  NewDataSet::GetSchemaSerializable() {
    ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
    this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
    stream->Position = 0;
    return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
}

inline ::System::Void NewDataSet::InitVars() {
    this->InitVars(true);
}

inline ::System::Void NewDataSet::InitVars(::System::Boolean initTable) {
    this->tableEXML = (cli::safe_cast<NewDataSet::EXMLDataTable^  >(__super::Tables[L"EXML"]));
    if (initTable == true) {
        if (this->tableEXML != nullptr) {
            this->tableEXML->InitVars();
        }
    }
    this->tabledefines = (cli::safe_cast<NewDataSet::definesDataTable^  >(__super::Tables[L"defines"]));
    if (initTable == true) {
        if (this->tabledefines != nullptr) {
            this->tabledefines->InitVars();
        }
    }
    this->tableexperiment = (cli::safe_cast<NewDataSet::experimentDataTable^  >(__super::Tables[L"experiment"]));
    if (initTable == true) {
        if (this->tableexperiment != nullptr) {
            this->tableexperiment->InitVars();
        }
    }
    this->tabledeclarations = (cli::safe_cast<NewDataSet::declarationsDataTable^  >(__super::Tables[L"declarations"]));
    if (initTable == true) {
        if (this->tabledeclarations != nullptr) {
            this->tabledeclarations->InitVars();
        }
    }
    this->tableobject = (cli::safe_cast<NewDataSet::objectDataTable^  >(__super::Tables[L"object"]));
    if (initTable == true) {
        if (this->tableobject != nullptr) {
            this->tableobject->InitVars();
        }
    }
    this->tabledefinitions = (cli::safe_cast<NewDataSet::definitionsDataTable^  >(__super::Tables[L"definitions"]));
    if (initTable == true) {
        if (this->tabledefinitions != nullptr) {
            this->tabledefinitions->InitVars();
        }
    }
    this->tabledefinition = (cli::safe_cast<NewDataSet::definitionDataTable^  >(__super::Tables[L"definition"]));
    if (initTable == true) {
        if (this->tabledefinition != nullptr) {
            this->tabledefinition->InitVars();
        }
    }
    this->tableconnections = (cli::safe_cast<NewDataSet::connectionsDataTable^  >(__super::Tables[L"connections"]));
    if (initTable == true) {
        if (this->tableconnections != nullptr) {
            this->tableconnections->InitVars();
        }
    }
    this->tableconnection = (cli::safe_cast<NewDataSet::connectionDataTable^  >(__super::Tables[L"connection"]));
    if (initTable == true) {
        if (this->tableconnection != nullptr) {
            this->tableconnection->InitVars();
        }
    }
    this->tablesource = (cli::safe_cast<NewDataSet::sourceDataTable^  >(__super::Tables[L"source"]));
    if (initTable == true) {
        if (this->tablesource != nullptr) {
            this->tablesource->InitVars();
        }
    }
    this->tabletarget = (cli::safe_cast<NewDataSet::targetDataTable^  >(__super::Tables[L"target"]));
    if (initTable == true) {
        if (this->tabletarget != nullptr) {
            this->tabletarget->InitVars();
        }
    }
    this->tableinitializations = (cli::safe_cast<NewDataSet::initializationsDataTable^  >(__super::Tables[L"initializations"]));
    if (initTable == true) {
        if (this->tableinitializations != nullptr) {
            this->tableinitializations->InitVars();
        }
    }
    this->tableinitialization = (cli::safe_cast<NewDataSet::initializationDataTable^  >(__super::Tables[L"initialization"]));
    if (initTable == true) {
        if (this->tableinitialization != nullptr) {
            this->tableinitialization->InitVars();
        }
    }
    this->tableactions = (cli::safe_cast<NewDataSet::actionsDataTable^  >(__super::Tables[L"actions"]));
    if (initTable == true) {
        if (this->tableactions != nullptr) {
            this->tableactions->InitVars();
        }
    }
    this->tableblocks = (cli::safe_cast<NewDataSet::blocksDataTable^  >(__super::Tables[L"blocks"]));
    if (initTable == true) {
        if (this->tableblocks != nullptr) {
            this->tableblocks->InitVars();
        }
    }
    this->tableblock = (cli::safe_cast<NewDataSet::blockDataTable^  >(__super::Tables[L"block"]));
    if (initTable == true) {
        if (this->tableblock != nullptr) {
            this->tableblock->InitVars();
        }
    }
    this->tableloops = (cli::safe_cast<NewDataSet::loopsDataTable^  >(__super::Tables[L"loops"]));
    if (initTable == true) {
        if (this->tableloops != nullptr) {
            this->tableloops->InitVars();
        }
    }
    this->tableloop = (cli::safe_cast<NewDataSet::loopDataTable^  >(__super::Tables[L"loop"]));
    if (initTable == true) {
        if (this->tableloop != nullptr) {
            this->tableloop->InitVars();
        }
    }
    this->tablefinalizations = (cli::safe_cast<NewDataSet::finalizationsDataTable^  >(__super::Tables[L"finalizations"]));
    if (initTable == true) {
        if (this->tablefinalizations != nullptr) {
            this->tablefinalizations->InitVars();
        }
    }
    this->tablefinalization = (cli::safe_cast<NewDataSet::finalizationDataTable^  >(__super::Tables[L"finalization"]));
    if (initTable == true) {
        if (this->tablefinalization != nullptr) {
            this->tablefinalization->InitVars();
        }
    }
    this->relationEXML_defines = this->Relations[L"EXML_defines"];
    this->relationdefines_experiment = this->Relations[L"defines_experiment"];
    this->relationEXML_declarations = this->Relations[L"EXML_declarations"];
    this->relationdeclarations_object = this->Relations[L"declarations_object"];
    this->relationinitialization_object = this->Relations[L"initialization_object"];
    this->relationblock_object = this->Relations[L"block_object"];
    this->relationfinalization_object = this->Relations[L"finalization_object"];
    this->relationobject_definitions = this->Relations[L"object_definitions"];
    this->relationdefinitions_definition = this->Relations[L"definitions_definition"];
    this->relationEXML_connections = this->Relations[L"EXML_connections"];
    this->relationconnections_connection = this->Relations[L"connections_connection"];
    this->relationconnection_source = this->Relations[L"connection_source"];
    this->relationconnection_target = this->Relations[L"connection_target"];
    this->relationEXML_initializations = this->Relations[L"EXML_initializations"];
    this->relationinitializations_initialization = this->Relations[L"initializations_initialization"];
    this->relationEXML_actions = this->Relations[L"EXML_actions"];
    this->relationactions_blocks = this->Relations[L"actions_blocks"];
    this->relationblocks_block = this->Relations[L"blocks_block"];
    this->relationblock_loops = this->Relations[L"block_loops"];
    this->relationloops_loop = this->Relations[L"loops_loop"];
    this->relationEXML_finalizations = this->Relations[L"EXML_finalizations"];
    this->relationfinalizations_finalization = this->Relations[L"finalizations_finalization"];
}

inline ::System::Void NewDataSet::InitClass() {
    this->DataSetName = L"NewDataSet";
    this->Prefix = L"";
    this->Locale = (gcnew ::System::Globalization::CultureInfo(L""));
    this->EnforceConstraints = true;
    this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
    this->tableEXML = (gcnew NewDataSet::EXMLDataTable());
    __super::Tables->Add(this->tableEXML);
    this->tabledefines = (gcnew NewDataSet::definesDataTable());
    __super::Tables->Add(this->tabledefines);
    this->tableexperiment = (gcnew NewDataSet::experimentDataTable());
    __super::Tables->Add(this->tableexperiment);
    this->tabledeclarations = (gcnew NewDataSet::declarationsDataTable());
    __super::Tables->Add(this->tabledeclarations);
    this->tableobject = (gcnew NewDataSet::objectDataTable());
    __super::Tables->Add(this->tableobject);
    this->tabledefinitions = (gcnew NewDataSet::definitionsDataTable());
    __super::Tables->Add(this->tabledefinitions);
    this->tabledefinition = (gcnew NewDataSet::definitionDataTable());
    __super::Tables->Add(this->tabledefinition);
    this->tableconnections = (gcnew NewDataSet::connectionsDataTable());
    __super::Tables->Add(this->tableconnections);
    this->tableconnection = (gcnew NewDataSet::connectionDataTable());
    __super::Tables->Add(this->tableconnection);
    this->tablesource = (gcnew NewDataSet::sourceDataTable());
    __super::Tables->Add(this->tablesource);
    this->tabletarget = (gcnew NewDataSet::targetDataTable());
    __super::Tables->Add(this->tabletarget);
    this->tableinitializations = (gcnew NewDataSet::initializationsDataTable());
    __super::Tables->Add(this->tableinitializations);
    this->tableinitialization = (gcnew NewDataSet::initializationDataTable());
    __super::Tables->Add(this->tableinitialization);
    this->tableactions = (gcnew NewDataSet::actionsDataTable());
    __super::Tables->Add(this->tableactions);
    this->tableblocks = (gcnew NewDataSet::blocksDataTable());
    __super::Tables->Add(this->tableblocks);
    this->tableblock = (gcnew NewDataSet::blockDataTable());
    __super::Tables->Add(this->tableblock);
    this->tableloops = (gcnew NewDataSet::loopsDataTable());
    __super::Tables->Add(this->tableloops);
    this->tableloop = (gcnew NewDataSet::loopDataTable());
    __super::Tables->Add(this->tableloop);
    this->tablefinalizations = (gcnew NewDataSet::finalizationsDataTable());
    __super::Tables->Add(this->tablefinalizations);
    this->tablefinalization = (gcnew NewDataSet::finalizationDataTable());
    __super::Tables->Add(this->tablefinalization);
    ::System::Data::ForeignKeyConstraint^  fkc;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"EXML_defines", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableEXML->EXML_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledefines->EXML_IdColumn}));
    this->tabledefines->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"defines_experiment", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledefines->defines_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableexperiment->defines_IdColumn}));
    this->tableexperiment->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"EXML_declarations", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableEXML->EXML_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledeclarations->EXML_IdColumn}));
    this->tabledeclarations->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"declarations_object", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledeclarations->declarations_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableobject->declarations_IdColumn}));
    this->tableobject->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"initialization_object", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableinitialization->initialization_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableobject->initialization_IdColumn}));
    this->tableobject->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"block_object", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableblock->block_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableobject->block_IdColumn}));
    this->tableobject->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"finalization_object", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablefinalization->finalization_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableobject->finalization_IdColumn}));
    this->tableobject->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"object_definitions", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableobject->object_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledefinitions->object_IdColumn}));
    this->tabledefinitions->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"definitions_definition", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledefinitions->definitions_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledefinition->definitions_IdColumn}));
    this->tabledefinition->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"EXML_connections", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableEXML->EXML_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableconnections->EXML_IdColumn}));
    this->tableconnections->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"connections_connection", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableconnections->connections_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableconnection->connections_IdColumn}));
    this->tableconnection->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"connection_source", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableconnection->connection_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesource->connection_IdColumn}));
    this->tablesource->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"connection_target", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableconnection->connection_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletarget->connection_IdColumn}));
    this->tabletarget->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"EXML_initializations", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableEXML->EXML_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableinitializations->EXML_IdColumn}));
    this->tableinitializations->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"initializations_initialization", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableinitializations->initializations_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableinitialization->initializations_IdColumn}));
    this->tableinitialization->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"EXML_actions", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableEXML->EXML_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableactions->EXML_IdColumn}));
    this->tableactions->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"actions_blocks", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableactions->actions_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableblocks->actions_IdColumn}));
    this->tableblocks->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"blocks_block", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableblocks->blocks_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableblock->blocks_IdColumn}));
    this->tableblock->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"block_loops", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableblock->block_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableloops->block_IdColumn}));
    this->tableloops->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"loops_loop", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableloops->loops_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableloop->loops_IdColumn}));
    this->tableloop->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"EXML_finalizations", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableEXML->EXML_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablefinalizations->EXML_IdColumn}));
    this->tablefinalizations->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"finalizations_finalization", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablefinalizations->finalizations_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablefinalization->finalizations_IdColumn}));
    this->tablefinalization->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    this->relationEXML_defines = (gcnew ::System::Data::DataRelation(L"EXML_defines", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableEXML->EXML_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledefines->EXML_IdColumn}, false));
    this->relationEXML_defines->Nested = true;
    this->Relations->Add(this->relationEXML_defines);
    this->relationdefines_experiment = (gcnew ::System::Data::DataRelation(L"defines_experiment", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledefines->defines_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableexperiment->defines_IdColumn}, false));
    this->relationdefines_experiment->Nested = true;
    this->Relations->Add(this->relationdefines_experiment);
    this->relationEXML_declarations = (gcnew ::System::Data::DataRelation(L"EXML_declarations", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableEXML->EXML_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledeclarations->EXML_IdColumn}, false));
    this->relationEXML_declarations->Nested = true;
    this->Relations->Add(this->relationEXML_declarations);
    this->relationdeclarations_object = (gcnew ::System::Data::DataRelation(L"declarations_object", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledeclarations->declarations_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableobject->declarations_IdColumn}, false));
    this->relationdeclarations_object->Nested = true;
    this->Relations->Add(this->relationdeclarations_object);
    this->relationinitialization_object = (gcnew ::System::Data::DataRelation(L"initialization_object", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableinitialization->initialization_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableobject->initialization_IdColumn}, false));
    this->relationinitialization_object->Nested = true;
    this->Relations->Add(this->relationinitialization_object);
    this->relationblock_object = (gcnew ::System::Data::DataRelation(L"block_object", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableblock->block_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableobject->block_IdColumn}, false));
    this->relationblock_object->Nested = true;
    this->Relations->Add(this->relationblock_object);
    this->relationfinalization_object = (gcnew ::System::Data::DataRelation(L"finalization_object", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablefinalization->finalization_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableobject->finalization_IdColumn}, false));
    this->relationfinalization_object->Nested = true;
    this->Relations->Add(this->relationfinalization_object);
    this->relationobject_definitions = (gcnew ::System::Data::DataRelation(L"object_definitions", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableobject->object_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledefinitions->object_IdColumn}, false));
    this->relationobject_definitions->Nested = true;
    this->Relations->Add(this->relationobject_definitions);
    this->relationdefinitions_definition = (gcnew ::System::Data::DataRelation(L"definitions_definition", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledefinitions->definitions_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledefinition->definitions_IdColumn}, false));
    this->relationdefinitions_definition->Nested = true;
    this->Relations->Add(this->relationdefinitions_definition);
    this->relationEXML_connections = (gcnew ::System::Data::DataRelation(L"EXML_connections", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableEXML->EXML_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableconnections->EXML_IdColumn}, false));
    this->relationEXML_connections->Nested = true;
    this->Relations->Add(this->relationEXML_connections);
    this->relationconnections_connection = (gcnew ::System::Data::DataRelation(L"connections_connection", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableconnections->connections_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableconnection->connections_IdColumn}, false));
    this->relationconnections_connection->Nested = true;
    this->Relations->Add(this->relationconnections_connection);
    this->relationconnection_source = (gcnew ::System::Data::DataRelation(L"connection_source", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableconnection->connection_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesource->connection_IdColumn}, false));
    this->relationconnection_source->Nested = true;
    this->Relations->Add(this->relationconnection_source);
    this->relationconnection_target = (gcnew ::System::Data::DataRelation(L"connection_target", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableconnection->connection_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletarget->connection_IdColumn}, false));
    this->relationconnection_target->Nested = true;
    this->Relations->Add(this->relationconnection_target);
    this->relationEXML_initializations = (gcnew ::System::Data::DataRelation(L"EXML_initializations", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableEXML->EXML_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableinitializations->EXML_IdColumn}, false));
    this->relationEXML_initializations->Nested = true;
    this->Relations->Add(this->relationEXML_initializations);
    this->relationinitializations_initialization = (gcnew ::System::Data::DataRelation(L"initializations_initialization", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableinitializations->initializations_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableinitialization->initializations_IdColumn}, false));
    this->relationinitializations_initialization->Nested = true;
    this->Relations->Add(this->relationinitializations_initialization);
    this->relationEXML_actions = (gcnew ::System::Data::DataRelation(L"EXML_actions", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableEXML->EXML_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableactions->EXML_IdColumn}, false));
    this->relationEXML_actions->Nested = true;
    this->Relations->Add(this->relationEXML_actions);
    this->relationactions_blocks = (gcnew ::System::Data::DataRelation(L"actions_blocks", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableactions->actions_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableblocks->actions_IdColumn}, false));
    this->relationactions_blocks->Nested = true;
    this->Relations->Add(this->relationactions_blocks);
    this->relationblocks_block = (gcnew ::System::Data::DataRelation(L"blocks_block", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableblocks->blocks_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableblock->blocks_IdColumn}, false));
    this->relationblocks_block->Nested = true;
    this->Relations->Add(this->relationblocks_block);
    this->relationblock_loops = (gcnew ::System::Data::DataRelation(L"block_loops", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableblock->block_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableloops->block_IdColumn}, false));
    this->relationblock_loops->Nested = true;
    this->Relations->Add(this->relationblock_loops);
    this->relationloops_loop = (gcnew ::System::Data::DataRelation(L"loops_loop", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableloops->loops_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableloop->loops_IdColumn}, false));
    this->relationloops_loop->Nested = true;
    this->Relations->Add(this->relationloops_loop);
    this->relationEXML_finalizations = (gcnew ::System::Data::DataRelation(L"EXML_finalizations", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableEXML->EXML_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablefinalizations->EXML_IdColumn}, false));
    this->relationEXML_finalizations->Nested = true;
    this->Relations->Add(this->relationEXML_finalizations);
    this->relationfinalizations_finalization = (gcnew ::System::Data::DataRelation(L"finalizations_finalization", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablefinalizations->finalizations_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablefinalization->finalizations_IdColumn}, false));
    this->relationfinalizations_finalization->Nested = true;
    this->Relations->Add(this->relationfinalizations_finalization);
}

inline ::System::Boolean NewDataSet::ShouldSerializeEXML() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializedefines() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeexperiment() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializedeclarations() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeobject() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializedefinitions() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializedefinition() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeconnections() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeconnection() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializesource() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializetarget() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeinitializations() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeinitialization() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeactions() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeblocks() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeblock() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeloops() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeloop() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializefinalizations() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializefinalization() {
    return false;
}

inline ::System::Void NewDataSet::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
    if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
        this->InitVars();
    }
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any->Namespace = ds->Namespace;
    sequence->Items->Add(any);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::EXMLDataTable::EXMLDataTable() {
    this->TableName = L"EXML";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::EXMLDataTable::EXMLDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::EXMLDataTable::EXMLDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::EXMLDataTable::versionColumn::get() {
    return this->columnversion;
}

inline ::System::Data::DataColumn^  NewDataSet::EXMLDataTable::EXML_IdColumn::get() {
    return this->columnEXML_Id;
}

inline ::System::Int32 NewDataSet::EXMLDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::EXMLRow^  NewDataSet::EXMLDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::EXMLRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::EXMLDataTable::AddEXMLRow(NewDataSet::EXMLRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::EXMLRow^  NewDataSet::EXMLDataTable::AddEXMLRow(System::String^  version) {
    NewDataSet::EXMLRow^  rowEXMLRow = (cli::safe_cast<NewDataSet::EXMLRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {version, nullptr};
    rowEXMLRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowEXMLRow);
    return rowEXMLRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::EXMLDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::EXMLDataTable::Clone() {
    NewDataSet::EXMLDataTable^  cln = (cli::safe_cast<NewDataSet::EXMLDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::EXMLDataTable::CreateInstance() {
    return (gcnew NewDataSet::EXMLDataTable());
}

inline ::System::Void NewDataSet::EXMLDataTable::InitVars() {
    this->columnversion = __super::Columns[L"version"];
    this->columnEXML_Id = __super::Columns[L"EXML_Id"];
}

inline ::System::Void NewDataSet::EXMLDataTable::InitClass() {
    this->columnversion = (gcnew ::System::Data::DataColumn(L"version", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnversion);
    this->columnEXML_Id = (gcnew ::System::Data::DataColumn(L"EXML_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnEXML_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnEXML_Id}, 
            true)));
    this->columnversion->Namespace = L"";
    this->columnEXML_Id->AutoIncrement = true;
    this->columnEXML_Id->AllowDBNull = false;
    this->columnEXML_Id->Unique = true;
}

inline NewDataSet::EXMLRow^  NewDataSet::EXMLDataTable::NewEXMLRow() {
    return (cli::safe_cast<NewDataSet::EXMLRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::EXMLDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::EXMLRow(builder));
}

inline ::System::Type^  NewDataSet::EXMLDataTable::GetRowType() {
    return NewDataSet::EXMLRow::typeid;
}

inline ::System::Void NewDataSet::EXMLDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->EXMLRowChanged(this, (gcnew NewDataSet::EXMLRowChangeEvent((cli::safe_cast<NewDataSet::EXMLRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::EXMLDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->EXMLRowChanging(this, (gcnew NewDataSet::EXMLRowChangeEvent((cli::safe_cast<NewDataSet::EXMLRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::EXMLDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->EXMLRowDeleted(this, (gcnew NewDataSet::EXMLRowChangeEvent((cli::safe_cast<NewDataSet::EXMLRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::EXMLDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->EXMLRowDeleting(this, (gcnew NewDataSet::EXMLRowChangeEvent((cli::safe_cast<NewDataSet::EXMLRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::EXMLDataTable::RemoveEXMLRow(NewDataSet::EXMLRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::EXMLDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"EXMLDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::definesDataTable::definesDataTable() {
    this->TableName = L"defines";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::definesDataTable::definesDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::definesDataTable::definesDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::definesDataTable::defines_IdColumn::get() {
    return this->columndefines_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::definesDataTable::EXML_IdColumn::get() {
    return this->columnEXML_Id;
}

inline ::System::Int32 NewDataSet::definesDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::definesRow^  NewDataSet::definesDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::definesRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::definesDataTable::AdddefinesRow(NewDataSet::definesRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::definesRow^  NewDataSet::definesDataTable::AdddefinesRow(NewDataSet::EXMLRow^  parentEXMLRowByEXML_defines) {
    NewDataSet::definesRow^  rowdefinesRow = (cli::safe_cast<NewDataSet::definesRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (parentEXMLRowByEXML_defines != nullptr) {
        columnValuesArray[1] = parentEXMLRowByEXML_defines[1];
    }
    rowdefinesRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowdefinesRow);
    return rowdefinesRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::definesDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::definesDataTable::Clone() {
    NewDataSet::definesDataTable^  cln = (cli::safe_cast<NewDataSet::definesDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::definesDataTable::CreateInstance() {
    return (gcnew NewDataSet::definesDataTable());
}

inline ::System::Void NewDataSet::definesDataTable::InitVars() {
    this->columndefines_Id = __super::Columns[L"defines_Id"];
    this->columnEXML_Id = __super::Columns[L"EXML_Id"];
}

inline ::System::Void NewDataSet::definesDataTable::InitClass() {
    this->columndefines_Id = (gcnew ::System::Data::DataColumn(L"defines_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columndefines_Id);
    this->columnEXML_Id = (gcnew ::System::Data::DataColumn(L"EXML_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnEXML_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columndefines_Id}, 
            true)));
    this->columndefines_Id->AutoIncrement = true;
    this->columndefines_Id->AllowDBNull = false;
    this->columndefines_Id->Unique = true;
}

inline NewDataSet::definesRow^  NewDataSet::definesDataTable::NewdefinesRow() {
    return (cli::safe_cast<NewDataSet::definesRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::definesDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::definesRow(builder));
}

inline ::System::Type^  NewDataSet::definesDataTable::GetRowType() {
    return NewDataSet::definesRow::typeid;
}

inline ::System::Void NewDataSet::definesDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->definesRowChanged(this, (gcnew NewDataSet::definesRowChangeEvent((cli::safe_cast<NewDataSet::definesRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::definesDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->definesRowChanging(this, (gcnew NewDataSet::definesRowChangeEvent((cli::safe_cast<NewDataSet::definesRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::definesDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->definesRowDeleted(this, (gcnew NewDataSet::definesRowChangeEvent((cli::safe_cast<NewDataSet::definesRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::definesDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->definesRowDeleting(this, (gcnew NewDataSet::definesRowChangeEvent((cli::safe_cast<NewDataSet::definesRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::definesDataTable::RemovedefinesRow(NewDataSet::definesRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::definesDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"definesDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::experimentDataTable::experimentDataTable() {
    this->TableName = L"experiment";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::experimentDataTable::experimentDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::experimentDataTable::experimentDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::experimentDataTable::IDColumn::get() {
    return this->columnID;
}

inline ::System::Data::DataColumn^  NewDataSet::experimentDataTable::nameColumn::get() {
    return this->columnname;
}

inline ::System::Data::DataColumn^  NewDataSet::experimentDataTable::debugmodeColumn::get() {
    return this->columndebugmode;
}

inline ::System::Data::DataColumn^  NewDataSet::experimentDataTable::defines_IdColumn::get() {
    return this->columndefines_Id;
}

inline ::System::Int32 NewDataSet::experimentDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::experimentRow^  NewDataSet::experimentDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::experimentRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::experimentDataTable::AddexperimentRow(NewDataSet::experimentRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::experimentRow^  NewDataSet::experimentDataTable::AddexperimentRow(System::Int64 ID, System::String^  name, 
            System::String^  debugmode, NewDataSet::definesRow^  parentdefinesRowBydefines_experiment) {
    NewDataSet::experimentRow^  rowexperimentRow = (cli::safe_cast<NewDataSet::experimentRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {ID, name, debugmode, nullptr};
    if (parentdefinesRowBydefines_experiment != nullptr) {
        columnValuesArray[3] = parentdefinesRowBydefines_experiment[0];
    }
    rowexperimentRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowexperimentRow);
    return rowexperimentRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::experimentDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::experimentDataTable::Clone() {
    NewDataSet::experimentDataTable^  cln = (cli::safe_cast<NewDataSet::experimentDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::experimentDataTable::CreateInstance() {
    return (gcnew NewDataSet::experimentDataTable());
}

inline ::System::Void NewDataSet::experimentDataTable::InitVars() {
    this->columnID = __super::Columns[L"ID"];
    this->columnname = __super::Columns[L"name"];
    this->columndebugmode = __super::Columns[L"debugmode"];
    this->columndefines_Id = __super::Columns[L"defines_Id"];
}

inline ::System::Void NewDataSet::experimentDataTable::InitClass() {
    this->columnID = (gcnew ::System::Data::DataColumn(L"ID", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnID);
    this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnname);
    this->columndebugmode = (gcnew ::System::Data::DataColumn(L"debugmode", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndebugmode);
    this->columndefines_Id = (gcnew ::System::Data::DataColumn(L"defines_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columndefines_Id);
    this->columnID->Namespace = L"";
    this->columnname->AllowDBNull = false;
    this->columndebugmode->AllowDBNull = false;
}

inline NewDataSet::experimentRow^  NewDataSet::experimentDataTable::NewexperimentRow() {
    return (cli::safe_cast<NewDataSet::experimentRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::experimentDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::experimentRow(builder));
}

inline ::System::Type^  NewDataSet::experimentDataTable::GetRowType() {
    return NewDataSet::experimentRow::typeid;
}

inline ::System::Void NewDataSet::experimentDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->experimentRowChanged(this, (gcnew NewDataSet::experimentRowChangeEvent((cli::safe_cast<NewDataSet::experimentRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::experimentDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->experimentRowChanging(this, (gcnew NewDataSet::experimentRowChangeEvent((cli::safe_cast<NewDataSet::experimentRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::experimentDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->experimentRowDeleted(this, (gcnew NewDataSet::experimentRowChangeEvent((cli::safe_cast<NewDataSet::experimentRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::experimentDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->experimentRowDeleting(this, (gcnew NewDataSet::experimentRowChangeEvent((cli::safe_cast<NewDataSet::experimentRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::experimentDataTable::RemoveexperimentRow(NewDataSet::experimentRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::experimentDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"experimentDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::declarationsDataTable::declarationsDataTable() {
    this->TableName = L"declarations";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::declarationsDataTable::declarationsDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::declarationsDataTable::declarationsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::declarationsDataTable::declarations_IdColumn::get() {
    return this->columndeclarations_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::declarationsDataTable::EXML_IdColumn::get() {
    return this->columnEXML_Id;
}

inline ::System::Int32 NewDataSet::declarationsDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::declarationsRow^  NewDataSet::declarationsDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::declarationsRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::declarationsDataTable::AdddeclarationsRow(NewDataSet::declarationsRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::declarationsRow^  NewDataSet::declarationsDataTable::AdddeclarationsRow(NewDataSet::EXMLRow^  parentEXMLRowByEXML_declarations) {
    NewDataSet::declarationsRow^  rowdeclarationsRow = (cli::safe_cast<NewDataSet::declarationsRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (parentEXMLRowByEXML_declarations != nullptr) {
        columnValuesArray[1] = parentEXMLRowByEXML_declarations[1];
    }
    rowdeclarationsRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowdeclarationsRow);
    return rowdeclarationsRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::declarationsDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::declarationsDataTable::Clone() {
    NewDataSet::declarationsDataTable^  cln = (cli::safe_cast<NewDataSet::declarationsDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::declarationsDataTable::CreateInstance() {
    return (gcnew NewDataSet::declarationsDataTable());
}

inline ::System::Void NewDataSet::declarationsDataTable::InitVars() {
    this->columndeclarations_Id = __super::Columns[L"declarations_Id"];
    this->columnEXML_Id = __super::Columns[L"EXML_Id"];
}

inline ::System::Void NewDataSet::declarationsDataTable::InitClass() {
    this->columndeclarations_Id = (gcnew ::System::Data::DataColumn(L"declarations_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columndeclarations_Id);
    this->columnEXML_Id = (gcnew ::System::Data::DataColumn(L"EXML_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnEXML_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columndeclarations_Id}, 
            true)));
    this->columndeclarations_Id->AutoIncrement = true;
    this->columndeclarations_Id->AllowDBNull = false;
    this->columndeclarations_Id->Unique = true;
}

inline NewDataSet::declarationsRow^  NewDataSet::declarationsDataTable::NewdeclarationsRow() {
    return (cli::safe_cast<NewDataSet::declarationsRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::declarationsDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::declarationsRow(builder));
}

inline ::System::Type^  NewDataSet::declarationsDataTable::GetRowType() {
    return NewDataSet::declarationsRow::typeid;
}

inline ::System::Void NewDataSet::declarationsDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->declarationsRowChanged(this, (gcnew NewDataSet::declarationsRowChangeEvent((cli::safe_cast<NewDataSet::declarationsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::declarationsDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->declarationsRowChanging(this, (gcnew NewDataSet::declarationsRowChangeEvent((cli::safe_cast<NewDataSet::declarationsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::declarationsDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->declarationsRowDeleted(this, (gcnew NewDataSet::declarationsRowChangeEvent((cli::safe_cast<NewDataSet::declarationsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::declarationsDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->declarationsRowDeleting(this, (gcnew NewDataSet::declarationsRowChangeEvent((cli::safe_cast<NewDataSet::declarationsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::declarationsDataTable::RemovedeclarationsRow(NewDataSet::declarationsRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::declarationsDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"declarationsDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::objectDataTable::objectDataTable() {
    this->TableName = L"object";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::objectDataTable::objectDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::objectDataTable::objectDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::objectDataTable::IDColumn::get() {
    return this->columnID;
}

inline ::System::Data::DataColumn^  NewDataSet::objectDataTable::_classColumn::get() {
    return this->column_class;
}

inline ::System::Data::DataColumn^  NewDataSet::objectDataTable::nameColumn::get() {
    return this->columnname;
}

inline ::System::Data::DataColumn^  NewDataSet::objectDataTable::object_IdColumn::get() {
    return this->columnobject_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::objectDataTable::declarations_IdColumn::get() {
    return this->columndeclarations_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::objectDataTable::initialization_IdColumn::get() {
    return this->columninitialization_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::objectDataTable::block_IdColumn::get() {
    return this->columnblock_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::objectDataTable::finalization_IdColumn::get() {
    return this->columnfinalization_Id;
}

inline ::System::Int32 NewDataSet::objectDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::objectRow^  NewDataSet::objectDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::objectRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::objectDataTable::AddobjectRow(NewDataSet::objectRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::objectRow^  NewDataSet::objectDataTable::AddobjectRow(
            System::Int64 ID, 
            System::String^  _class, 
            System::String^  name, 
            NewDataSet::declarationsRow^  parentdeclarationsRowBydeclarations_object, 
            NewDataSet::initializationRow^  parentinitializationRowByinitialization_object, 
            NewDataSet::blockRow^  parentblockRowByblock_object, 
            NewDataSet::finalizationRow^  parentfinalizationRowByfinalization_object) {
    NewDataSet::objectRow^  rowobjectRow = (cli::safe_cast<NewDataSet::objectRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(8) {ID, _class, name, nullptr, 
        nullptr, nullptr, nullptr, nullptr};
    if (parentdeclarationsRowBydeclarations_object != nullptr) {
        columnValuesArray[4] = parentdeclarationsRowBydeclarations_object[0];
    }
    if (parentinitializationRowByinitialization_object != nullptr) {
        columnValuesArray[5] = parentinitializationRowByinitialization_object[1];
    }
    if (parentblockRowByblock_object != nullptr) {
        columnValuesArray[6] = parentblockRowByblock_object[6];
    }
    if (parentfinalizationRowByfinalization_object != nullptr) {
        columnValuesArray[7] = parentfinalizationRowByfinalization_object[1];
    }
    rowobjectRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowobjectRow);
    return rowobjectRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::objectDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::objectDataTable::Clone() {
    NewDataSet::objectDataTable^  cln = (cli::safe_cast<NewDataSet::objectDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::objectDataTable::CreateInstance() {
    return (gcnew NewDataSet::objectDataTable());
}

inline ::System::Void NewDataSet::objectDataTable::InitVars() {
    this->columnID = __super::Columns[L"ID"];
    this->column_class = __super::Columns[L"class"];
    this->columnname = __super::Columns[L"name"];
    this->columnobject_Id = __super::Columns[L"object_Id"];
    this->columndeclarations_Id = __super::Columns[L"declarations_Id"];
    this->columninitialization_Id = __super::Columns[L"initialization_Id"];
    this->columnblock_Id = __super::Columns[L"block_Id"];
    this->columnfinalization_Id = __super::Columns[L"finalization_Id"];
}

inline ::System::Void NewDataSet::objectDataTable::InitClass() {
    this->columnID = (gcnew ::System::Data::DataColumn(L"ID", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnID);
    this->column_class = (gcnew ::System::Data::DataColumn(L"class", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->column_class);
    this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnname);
    this->columnobject_Id = (gcnew ::System::Data::DataColumn(L"object_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnobject_Id);
    this->columndeclarations_Id = (gcnew ::System::Data::DataColumn(L"declarations_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columndeclarations_Id);
    this->columninitialization_Id = (gcnew ::System::Data::DataColumn(L"initialization_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columninitialization_Id);
    this->columnblock_Id = (gcnew ::System::Data::DataColumn(L"block_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnblock_Id);
    this->columnfinalization_Id = (gcnew ::System::Data::DataColumn(L"finalization_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnfinalization_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnobject_Id}, 
            true)));
    this->columnID->Namespace = L"";
    this->column_class->AllowDBNull = false;
    this->columnname->AllowDBNull = false;
    this->columnobject_Id->AutoIncrement = true;
    this->columnobject_Id->AllowDBNull = false;
    this->columnobject_Id->Unique = true;
}

inline NewDataSet::objectRow^  NewDataSet::objectDataTable::NewobjectRow() {
    return (cli::safe_cast<NewDataSet::objectRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::objectDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::objectRow(builder));
}

inline ::System::Type^  NewDataSet::objectDataTable::GetRowType() {
    return NewDataSet::objectRow::typeid;
}

inline ::System::Void NewDataSet::objectDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->objectRowChanged(this, (gcnew NewDataSet::objectRowChangeEvent((cli::safe_cast<NewDataSet::objectRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::objectDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->objectRowChanging(this, (gcnew NewDataSet::objectRowChangeEvent((cli::safe_cast<NewDataSet::objectRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::objectDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->objectRowDeleted(this, (gcnew NewDataSet::objectRowChangeEvent((cli::safe_cast<NewDataSet::objectRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::objectDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->objectRowDeleting(this, (gcnew NewDataSet::objectRowChangeEvent((cli::safe_cast<NewDataSet::objectRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::objectDataTable::RemoveobjectRow(NewDataSet::objectRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::objectDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"objectDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::definitionsDataTable::definitionsDataTable() {
    this->TableName = L"definitions";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::definitionsDataTable::definitionsDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::definitionsDataTable::definitionsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::definitionsDataTable::definitions_IdColumn::get() {
    return this->columndefinitions_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::definitionsDataTable::object_IdColumn::get() {
    return this->columnobject_Id;
}

inline ::System::Int32 NewDataSet::definitionsDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::definitionsRow^  NewDataSet::definitionsDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::definitionsRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::definitionsDataTable::AdddefinitionsRow(NewDataSet::definitionsRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::definitionsRow^  NewDataSet::definitionsDataTable::AdddefinitionsRow(NewDataSet::objectRow^  parentobjectRowByobject_definitions) {
    NewDataSet::definitionsRow^  rowdefinitionsRow = (cli::safe_cast<NewDataSet::definitionsRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (parentobjectRowByobject_definitions != nullptr) {
        columnValuesArray[1] = parentobjectRowByobject_definitions[3];
    }
    rowdefinitionsRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowdefinitionsRow);
    return rowdefinitionsRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::definitionsDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::definitionsDataTable::Clone() {
    NewDataSet::definitionsDataTable^  cln = (cli::safe_cast<NewDataSet::definitionsDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::definitionsDataTable::CreateInstance() {
    return (gcnew NewDataSet::definitionsDataTable());
}

inline ::System::Void NewDataSet::definitionsDataTable::InitVars() {
    this->columndefinitions_Id = __super::Columns[L"definitions_Id"];
    this->columnobject_Id = __super::Columns[L"object_Id"];
}

inline ::System::Void NewDataSet::definitionsDataTable::InitClass() {
    this->columndefinitions_Id = (gcnew ::System::Data::DataColumn(L"definitions_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columndefinitions_Id);
    this->columnobject_Id = (gcnew ::System::Data::DataColumn(L"object_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnobject_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columndefinitions_Id}, 
            true)));
    this->columndefinitions_Id->AutoIncrement = true;
    this->columndefinitions_Id->AllowDBNull = false;
    this->columndefinitions_Id->Unique = true;
}

inline NewDataSet::definitionsRow^  NewDataSet::definitionsDataTable::NewdefinitionsRow() {
    return (cli::safe_cast<NewDataSet::definitionsRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::definitionsDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::definitionsRow(builder));
}

inline ::System::Type^  NewDataSet::definitionsDataTable::GetRowType() {
    return NewDataSet::definitionsRow::typeid;
}

inline ::System::Void NewDataSet::definitionsDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->definitionsRowChanged(this, (gcnew NewDataSet::definitionsRowChangeEvent((cli::safe_cast<NewDataSet::definitionsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::definitionsDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->definitionsRowChanging(this, (gcnew NewDataSet::definitionsRowChangeEvent((cli::safe_cast<NewDataSet::definitionsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::definitionsDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->definitionsRowDeleted(this, (gcnew NewDataSet::definitionsRowChangeEvent((cli::safe_cast<NewDataSet::definitionsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::definitionsDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->definitionsRowDeleting(this, (gcnew NewDataSet::definitionsRowChangeEvent((cli::safe_cast<NewDataSet::definitionsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::definitionsDataTable::RemovedefinitionsRow(NewDataSet::definitionsRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::definitionsDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"definitionsDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::definitionDataTable::definitionDataTable() {
    this->TableName = L"definition";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::definitionDataTable::definitionDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::definitionDataTable::definitionDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::definitionDataTable::IDColumn::get() {
    return this->columnID;
}

inline ::System::Data::DataColumn^  NewDataSet::definitionDataTable::fileColumn::get() {
    return this->columnfile;
}

inline ::System::Data::DataColumn^  NewDataSet::definitionDataTable::definitions_IdColumn::get() {
    return this->columndefinitions_Id;
}

inline ::System::Int32 NewDataSet::definitionDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::definitionRow^  NewDataSet::definitionDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::definitionRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::definitionDataTable::AdddefinitionRow(NewDataSet::definitionRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::definitionRow^  NewDataSet::definitionDataTable::AdddefinitionRow(System::Int64 ID, System::String^  file, 
            NewDataSet::definitionsRow^  parentdefinitionsRowBydefinitions_definition) {
    NewDataSet::definitionRow^  rowdefinitionRow = (cli::safe_cast<NewDataSet::definitionRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {ID, file, nullptr};
    if (parentdefinitionsRowBydefinitions_definition != nullptr) {
        columnValuesArray[2] = parentdefinitionsRowBydefinitions_definition[0];
    }
    rowdefinitionRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowdefinitionRow);
    return rowdefinitionRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::definitionDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::definitionDataTable::Clone() {
    NewDataSet::definitionDataTable^  cln = (cli::safe_cast<NewDataSet::definitionDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::definitionDataTable::CreateInstance() {
    return (gcnew NewDataSet::definitionDataTable());
}

inline ::System::Void NewDataSet::definitionDataTable::InitVars() {
    this->columnID = __super::Columns[L"ID"];
    this->columnfile = __super::Columns[L"file"];
    this->columndefinitions_Id = __super::Columns[L"definitions_Id"];
}

inline ::System::Void NewDataSet::definitionDataTable::InitClass() {
    this->columnID = (gcnew ::System::Data::DataColumn(L"ID", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnID);
    this->columnfile = (gcnew ::System::Data::DataColumn(L"file", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnfile);
    this->columndefinitions_Id = (gcnew ::System::Data::DataColumn(L"definitions_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columndefinitions_Id);
    this->columnID->Namespace = L"";
    this->columnfile->AllowDBNull = false;
}

inline NewDataSet::definitionRow^  NewDataSet::definitionDataTable::NewdefinitionRow() {
    return (cli::safe_cast<NewDataSet::definitionRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::definitionDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::definitionRow(builder));
}

inline ::System::Type^  NewDataSet::definitionDataTable::GetRowType() {
    return NewDataSet::definitionRow::typeid;
}

inline ::System::Void NewDataSet::definitionDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->definitionRowChanged(this, (gcnew NewDataSet::definitionRowChangeEvent((cli::safe_cast<NewDataSet::definitionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::definitionDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->definitionRowChanging(this, (gcnew NewDataSet::definitionRowChangeEvent((cli::safe_cast<NewDataSet::definitionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::definitionDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->definitionRowDeleted(this, (gcnew NewDataSet::definitionRowChangeEvent((cli::safe_cast<NewDataSet::definitionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::definitionDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->definitionRowDeleting(this, (gcnew NewDataSet::definitionRowChangeEvent((cli::safe_cast<NewDataSet::definitionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::definitionDataTable::RemovedefinitionRow(NewDataSet::definitionRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::definitionDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"definitionDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::connectionsDataTable::connectionsDataTable() {
    this->TableName = L"connections";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::connectionsDataTable::connectionsDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::connectionsDataTable::connectionsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::connectionsDataTable::connections_IdColumn::get() {
    return this->columnconnections_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::connectionsDataTable::EXML_IdColumn::get() {
    return this->columnEXML_Id;
}

inline ::System::Int32 NewDataSet::connectionsDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::connectionsRow^  NewDataSet::connectionsDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::connectionsRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::connectionsDataTable::AddconnectionsRow(NewDataSet::connectionsRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::connectionsRow^  NewDataSet::connectionsDataTable::AddconnectionsRow(NewDataSet::EXMLRow^  parentEXMLRowByEXML_connections) {
    NewDataSet::connectionsRow^  rowconnectionsRow = (cli::safe_cast<NewDataSet::connectionsRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (parentEXMLRowByEXML_connections != nullptr) {
        columnValuesArray[1] = parentEXMLRowByEXML_connections[1];
    }
    rowconnectionsRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowconnectionsRow);
    return rowconnectionsRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::connectionsDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::connectionsDataTable::Clone() {
    NewDataSet::connectionsDataTable^  cln = (cli::safe_cast<NewDataSet::connectionsDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::connectionsDataTable::CreateInstance() {
    return (gcnew NewDataSet::connectionsDataTable());
}

inline ::System::Void NewDataSet::connectionsDataTable::InitVars() {
    this->columnconnections_Id = __super::Columns[L"connections_Id"];
    this->columnEXML_Id = __super::Columns[L"EXML_Id"];
}

inline ::System::Void NewDataSet::connectionsDataTable::InitClass() {
    this->columnconnections_Id = (gcnew ::System::Data::DataColumn(L"connections_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnconnections_Id);
    this->columnEXML_Id = (gcnew ::System::Data::DataColumn(L"EXML_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnEXML_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnconnections_Id}, 
            true)));
    this->columnconnections_Id->AutoIncrement = true;
    this->columnconnections_Id->AllowDBNull = false;
    this->columnconnections_Id->Unique = true;
}

inline NewDataSet::connectionsRow^  NewDataSet::connectionsDataTable::NewconnectionsRow() {
    return (cli::safe_cast<NewDataSet::connectionsRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::connectionsDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::connectionsRow(builder));
}

inline ::System::Type^  NewDataSet::connectionsDataTable::GetRowType() {
    return NewDataSet::connectionsRow::typeid;
}

inline ::System::Void NewDataSet::connectionsDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->connectionsRowChanged(this, (gcnew NewDataSet::connectionsRowChangeEvent((cli::safe_cast<NewDataSet::connectionsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::connectionsDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->connectionsRowChanging(this, (gcnew NewDataSet::connectionsRowChangeEvent((cli::safe_cast<NewDataSet::connectionsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::connectionsDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->connectionsRowDeleted(this, (gcnew NewDataSet::connectionsRowChangeEvent((cli::safe_cast<NewDataSet::connectionsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::connectionsDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->connectionsRowDeleting(this, (gcnew NewDataSet::connectionsRowChangeEvent((cli::safe_cast<NewDataSet::connectionsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::connectionsDataTable::RemoveconnectionsRow(NewDataSet::connectionsRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::connectionsDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"connectionsDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::connectionDataTable::connectionDataTable() {
    this->TableName = L"connection";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::connectionDataTable::connectionDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::connectionDataTable::connectionDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::connectionDataTable::IDColumn::get() {
    return this->columnID;
}

inline ::System::Data::DataColumn^  NewDataSet::connectionDataTable::connection_IdColumn::get() {
    return this->columnconnection_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::connectionDataTable::connections_IdColumn::get() {
    return this->columnconnections_Id;
}

inline ::System::Int32 NewDataSet::connectionDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::connectionRow^  NewDataSet::connectionDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::connectionRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::connectionDataTable::AddconnectionRow(NewDataSet::connectionRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::connectionRow^  NewDataSet::connectionDataTable::AddconnectionRow(System::Int64 ID, NewDataSet::connectionsRow^  parentconnectionsRowByconnections_connection) {
    NewDataSet::connectionRow^  rowconnectionRow = (cli::safe_cast<NewDataSet::connectionRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {ID, nullptr, nullptr};
    if (parentconnectionsRowByconnections_connection != nullptr) {
        columnValuesArray[2] = parentconnectionsRowByconnections_connection[0];
    }
    rowconnectionRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowconnectionRow);
    return rowconnectionRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::connectionDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::connectionDataTable::Clone() {
    NewDataSet::connectionDataTable^  cln = (cli::safe_cast<NewDataSet::connectionDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::connectionDataTable::CreateInstance() {
    return (gcnew NewDataSet::connectionDataTable());
}

inline ::System::Void NewDataSet::connectionDataTable::InitVars() {
    this->columnID = __super::Columns[L"ID"];
    this->columnconnection_Id = __super::Columns[L"connection_Id"];
    this->columnconnections_Id = __super::Columns[L"connections_Id"];
}

inline ::System::Void NewDataSet::connectionDataTable::InitClass() {
    this->columnID = (gcnew ::System::Data::DataColumn(L"ID", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnID);
    this->columnconnection_Id = (gcnew ::System::Data::DataColumn(L"connection_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnconnection_Id);
    this->columnconnections_Id = (gcnew ::System::Data::DataColumn(L"connections_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnconnections_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnconnection_Id}, 
            true)));
    this->columnID->Namespace = L"";
    this->columnconnection_Id->AutoIncrement = true;
    this->columnconnection_Id->AllowDBNull = false;
    this->columnconnection_Id->Unique = true;
}

inline NewDataSet::connectionRow^  NewDataSet::connectionDataTable::NewconnectionRow() {
    return (cli::safe_cast<NewDataSet::connectionRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::connectionDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::connectionRow(builder));
}

inline ::System::Type^  NewDataSet::connectionDataTable::GetRowType() {
    return NewDataSet::connectionRow::typeid;
}

inline ::System::Void NewDataSet::connectionDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->connectionRowChanged(this, (gcnew NewDataSet::connectionRowChangeEvent((cli::safe_cast<NewDataSet::connectionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::connectionDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->connectionRowChanging(this, (gcnew NewDataSet::connectionRowChangeEvent((cli::safe_cast<NewDataSet::connectionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::connectionDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->connectionRowDeleted(this, (gcnew NewDataSet::connectionRowChangeEvent((cli::safe_cast<NewDataSet::connectionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::connectionDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->connectionRowDeleting(this, (gcnew NewDataSet::connectionRowChangeEvent((cli::safe_cast<NewDataSet::connectionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::connectionDataTable::RemoveconnectionRow(NewDataSet::connectionRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::connectionDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"connectionDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::sourceDataTable::sourceDataTable() {
    this->TableName = L"source";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::sourceDataTable::sourceDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::sourceDataTable::sourceDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::sourceDataTable::objectColumn::get() {
    return this->columnobject;
}

inline ::System::Data::DataColumn^  NewDataSet::sourceDataTable::typeColumn::get() {
    return this->columntype;
}

inline ::System::Data::DataColumn^  NewDataSet::sourceDataTable::signatureColumn::get() {
    return this->columnsignature;
}

inline ::System::Data::DataColumn^  NewDataSet::sourceDataTable::connection_IdColumn::get() {
    return this->columnconnection_Id;
}

inline ::System::Int32 NewDataSet::sourceDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::sourceRow^  NewDataSet::sourceDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::sourceRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::sourceDataTable::AddsourceRow(NewDataSet::sourceRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::sourceRow^  NewDataSet::sourceDataTable::AddsourceRow(System::Int64 object, System::String^  type, System::String^  signature, 
            NewDataSet::connectionRow^  parentconnectionRowByconnection_source) {
    NewDataSet::sourceRow^  rowsourceRow = (cli::safe_cast<NewDataSet::sourceRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {object, type, signature, 
        nullptr};
    if (parentconnectionRowByconnection_source != nullptr) {
        columnValuesArray[3] = parentconnectionRowByconnection_source[1];
    }
    rowsourceRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowsourceRow);
    return rowsourceRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::sourceDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::sourceDataTable::Clone() {
    NewDataSet::sourceDataTable^  cln = (cli::safe_cast<NewDataSet::sourceDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::sourceDataTable::CreateInstance() {
    return (gcnew NewDataSet::sourceDataTable());
}

inline ::System::Void NewDataSet::sourceDataTable::InitVars() {
    this->columnobject = __super::Columns[L"object"];
    this->columntype = __super::Columns[L"type"];
    this->columnsignature = __super::Columns[L"signature"];
    this->columnconnection_Id = __super::Columns[L"connection_Id"];
}

inline ::System::Void NewDataSet::sourceDataTable::InitClass() {
    this->columnobject = (gcnew ::System::Data::DataColumn(L"object", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnobject);
    this->columntype = (gcnew ::System::Data::DataColumn(L"type", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columntype);
    this->columnsignature = (gcnew ::System::Data::DataColumn(L"signature", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnsignature);
    this->columnconnection_Id = (gcnew ::System::Data::DataColumn(L"connection_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnconnection_Id);
    this->columnobject->AllowDBNull = false;
    this->columntype->AllowDBNull = false;
    this->columnsignature->AllowDBNull = false;
}

inline NewDataSet::sourceRow^  NewDataSet::sourceDataTable::NewsourceRow() {
    return (cli::safe_cast<NewDataSet::sourceRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::sourceDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::sourceRow(builder));
}

inline ::System::Type^  NewDataSet::sourceDataTable::GetRowType() {
    return NewDataSet::sourceRow::typeid;
}

inline ::System::Void NewDataSet::sourceDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->sourceRowChanged(this, (gcnew NewDataSet::sourceRowChangeEvent((cli::safe_cast<NewDataSet::sourceRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::sourceDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->sourceRowChanging(this, (gcnew NewDataSet::sourceRowChangeEvent((cli::safe_cast<NewDataSet::sourceRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::sourceDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->sourceRowDeleted(this, (gcnew NewDataSet::sourceRowChangeEvent((cli::safe_cast<NewDataSet::sourceRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::sourceDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->sourceRowDeleting(this, (gcnew NewDataSet::sourceRowChangeEvent((cli::safe_cast<NewDataSet::sourceRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::sourceDataTable::RemovesourceRow(NewDataSet::sourceRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::sourceDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"sourceDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::targetDataTable::targetDataTable() {
    this->TableName = L"target";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::targetDataTable::targetDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::targetDataTable::targetDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::targetDataTable::objectColumn::get() {
    return this->columnobject;
}

inline ::System::Data::DataColumn^  NewDataSet::targetDataTable::typeColumn::get() {
    return this->columntype;
}

inline ::System::Data::DataColumn^  NewDataSet::targetDataTable::signatureColumn::get() {
    return this->columnsignature;
}

inline ::System::Data::DataColumn^  NewDataSet::targetDataTable::connection_IdColumn::get() {
    return this->columnconnection_Id;
}

inline ::System::Int32 NewDataSet::targetDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::targetRow^  NewDataSet::targetDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::targetRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::targetDataTable::AddtargetRow(NewDataSet::targetRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::targetRow^  NewDataSet::targetDataTable::AddtargetRow(System::Int64 object, System::String^  type, System::String^  signature, 
            NewDataSet::connectionRow^  parentconnectionRowByconnection_target) {
    NewDataSet::targetRow^  rowtargetRow = (cli::safe_cast<NewDataSet::targetRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {object, type, signature, 
        nullptr};
    if (parentconnectionRowByconnection_target != nullptr) {
        columnValuesArray[3] = parentconnectionRowByconnection_target[1];
    }
    rowtargetRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowtargetRow);
    return rowtargetRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::targetDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::targetDataTable::Clone() {
    NewDataSet::targetDataTable^  cln = (cli::safe_cast<NewDataSet::targetDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::targetDataTable::CreateInstance() {
    return (gcnew NewDataSet::targetDataTable());
}

inline ::System::Void NewDataSet::targetDataTable::InitVars() {
    this->columnobject = __super::Columns[L"object"];
    this->columntype = __super::Columns[L"type"];
    this->columnsignature = __super::Columns[L"signature"];
    this->columnconnection_Id = __super::Columns[L"connection_Id"];
}

inline ::System::Void NewDataSet::targetDataTable::InitClass() {
    this->columnobject = (gcnew ::System::Data::DataColumn(L"object", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnobject);
    this->columntype = (gcnew ::System::Data::DataColumn(L"type", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columntype);
    this->columnsignature = (gcnew ::System::Data::DataColumn(L"signature", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnsignature);
    this->columnconnection_Id = (gcnew ::System::Data::DataColumn(L"connection_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnconnection_Id);
    this->columnobject->AllowDBNull = false;
    this->columntype->AllowDBNull = false;
    this->columnsignature->AllowDBNull = false;
}

inline NewDataSet::targetRow^  NewDataSet::targetDataTable::NewtargetRow() {
    return (cli::safe_cast<NewDataSet::targetRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::targetDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::targetRow(builder));
}

inline ::System::Type^  NewDataSet::targetDataTable::GetRowType() {
    return NewDataSet::targetRow::typeid;
}

inline ::System::Void NewDataSet::targetDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->targetRowChanged(this, (gcnew NewDataSet::targetRowChangeEvent((cli::safe_cast<NewDataSet::targetRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::targetDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->targetRowChanging(this, (gcnew NewDataSet::targetRowChangeEvent((cli::safe_cast<NewDataSet::targetRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::targetDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->targetRowDeleted(this, (gcnew NewDataSet::targetRowChangeEvent((cli::safe_cast<NewDataSet::targetRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::targetDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->targetRowDeleting(this, (gcnew NewDataSet::targetRowChangeEvent((cli::safe_cast<NewDataSet::targetRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::targetDataTable::RemovetargetRow(NewDataSet::targetRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::targetDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"targetDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::initializationsDataTable::initializationsDataTable() {
    this->TableName = L"initializations";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::initializationsDataTable::initializationsDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::initializationsDataTable::initializationsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::initializationsDataTable::initializations_IdColumn::get() {
    return this->columninitializations_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::initializationsDataTable::EXML_IdColumn::get() {
    return this->columnEXML_Id;
}

inline ::System::Int32 NewDataSet::initializationsDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::initializationsRow^  NewDataSet::initializationsDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::initializationsRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::initializationsDataTable::AddinitializationsRow(NewDataSet::initializationsRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::initializationsRow^  NewDataSet::initializationsDataTable::AddinitializationsRow(NewDataSet::EXMLRow^  parentEXMLRowByEXML_initializations) {
    NewDataSet::initializationsRow^  rowinitializationsRow = (cli::safe_cast<NewDataSet::initializationsRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (parentEXMLRowByEXML_initializations != nullptr) {
        columnValuesArray[1] = parentEXMLRowByEXML_initializations[1];
    }
    rowinitializationsRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowinitializationsRow);
    return rowinitializationsRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::initializationsDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::initializationsDataTable::Clone() {
    NewDataSet::initializationsDataTable^  cln = (cli::safe_cast<NewDataSet::initializationsDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::initializationsDataTable::CreateInstance() {
    return (gcnew NewDataSet::initializationsDataTable());
}

inline ::System::Void NewDataSet::initializationsDataTable::InitVars() {
    this->columninitializations_Id = __super::Columns[L"initializations_Id"];
    this->columnEXML_Id = __super::Columns[L"EXML_Id"];
}

inline ::System::Void NewDataSet::initializationsDataTable::InitClass() {
    this->columninitializations_Id = (gcnew ::System::Data::DataColumn(L"initializations_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columninitializations_Id);
    this->columnEXML_Id = (gcnew ::System::Data::DataColumn(L"EXML_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnEXML_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columninitializations_Id}, 
            true)));
    this->columninitializations_Id->AutoIncrement = true;
    this->columninitializations_Id->AllowDBNull = false;
    this->columninitializations_Id->Unique = true;
}

inline NewDataSet::initializationsRow^  NewDataSet::initializationsDataTable::NewinitializationsRow() {
    return (cli::safe_cast<NewDataSet::initializationsRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::initializationsDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::initializationsRow(builder));
}

inline ::System::Type^  NewDataSet::initializationsDataTable::GetRowType() {
    return NewDataSet::initializationsRow::typeid;
}

inline ::System::Void NewDataSet::initializationsDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->initializationsRowChanged(this, (gcnew NewDataSet::initializationsRowChangeEvent((cli::safe_cast<NewDataSet::initializationsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::initializationsDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->initializationsRowChanging(this, (gcnew NewDataSet::initializationsRowChangeEvent((cli::safe_cast<NewDataSet::initializationsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::initializationsDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->initializationsRowDeleted(this, (gcnew NewDataSet::initializationsRowChangeEvent((cli::safe_cast<NewDataSet::initializationsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::initializationsDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->initializationsRowDeleting(this, (gcnew NewDataSet::initializationsRowChangeEvent((cli::safe_cast<NewDataSet::initializationsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::initializationsDataTable::RemoveinitializationsRow(NewDataSet::initializationsRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::initializationsDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"initializationsDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::initializationDataTable::initializationDataTable() {
    this->TableName = L"initialization";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::initializationDataTable::initializationDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::initializationDataTable::initializationDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::initializationDataTable::IDColumn::get() {
    return this->columnID;
}

inline ::System::Data::DataColumn^  NewDataSet::initializationDataTable::initialization_IdColumn::get() {
    return this->columninitialization_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::initializationDataTable::initializations_IdColumn::get() {
    return this->columninitializations_Id;
}

inline ::System::Int32 NewDataSet::initializationDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::initializationRow^  NewDataSet::initializationDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::initializationRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::initializationDataTable::AddinitializationRow(NewDataSet::initializationRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::initializationRow^  NewDataSet::initializationDataTable::AddinitializationRow(System::Int64 ID, NewDataSet::initializationsRow^  parentinitializationsRowByinitializations_initialization) {
    NewDataSet::initializationRow^  rowinitializationRow = (cli::safe_cast<NewDataSet::initializationRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {ID, nullptr, nullptr};
    if (parentinitializationsRowByinitializations_initialization != nullptr) {
        columnValuesArray[2] = parentinitializationsRowByinitializations_initialization[0];
    }
    rowinitializationRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowinitializationRow);
    return rowinitializationRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::initializationDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::initializationDataTable::Clone() {
    NewDataSet::initializationDataTable^  cln = (cli::safe_cast<NewDataSet::initializationDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::initializationDataTable::CreateInstance() {
    return (gcnew NewDataSet::initializationDataTable());
}

inline ::System::Void NewDataSet::initializationDataTable::InitVars() {
    this->columnID = __super::Columns[L"ID"];
    this->columninitialization_Id = __super::Columns[L"initialization_Id"];
    this->columninitializations_Id = __super::Columns[L"initializations_Id"];
}

inline ::System::Void NewDataSet::initializationDataTable::InitClass() {
    this->columnID = (gcnew ::System::Data::DataColumn(L"ID", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnID);
    this->columninitialization_Id = (gcnew ::System::Data::DataColumn(L"initialization_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columninitialization_Id);
    this->columninitializations_Id = (gcnew ::System::Data::DataColumn(L"initializations_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columninitializations_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columninitialization_Id}, 
            true)));
    this->columnID->Namespace = L"";
    this->columninitialization_Id->AutoIncrement = true;
    this->columninitialization_Id->AllowDBNull = false;
    this->columninitialization_Id->Unique = true;
}

inline NewDataSet::initializationRow^  NewDataSet::initializationDataTable::NewinitializationRow() {
    return (cli::safe_cast<NewDataSet::initializationRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::initializationDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::initializationRow(builder));
}

inline ::System::Type^  NewDataSet::initializationDataTable::GetRowType() {
    return NewDataSet::initializationRow::typeid;
}

inline ::System::Void NewDataSet::initializationDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->initializationRowChanged(this, (gcnew NewDataSet::initializationRowChangeEvent((cli::safe_cast<NewDataSet::initializationRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::initializationDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->initializationRowChanging(this, (gcnew NewDataSet::initializationRowChangeEvent((cli::safe_cast<NewDataSet::initializationRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::initializationDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->initializationRowDeleted(this, (gcnew NewDataSet::initializationRowChangeEvent((cli::safe_cast<NewDataSet::initializationRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::initializationDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->initializationRowDeleting(this, (gcnew NewDataSet::initializationRowChangeEvent((cli::safe_cast<NewDataSet::initializationRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::initializationDataTable::RemoveinitializationRow(NewDataSet::initializationRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::initializationDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"initializationDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::actionsDataTable::actionsDataTable() {
    this->TableName = L"actions";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::actionsDataTable::actionsDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::actionsDataTable::actionsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::actionsDataTable::actions_IdColumn::get() {
    return this->columnactions_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::actionsDataTable::EXML_IdColumn::get() {
    return this->columnEXML_Id;
}

inline ::System::Int32 NewDataSet::actionsDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::actionsRow^  NewDataSet::actionsDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::actionsRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::actionsDataTable::AddactionsRow(NewDataSet::actionsRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::actionsRow^  NewDataSet::actionsDataTable::AddactionsRow(NewDataSet::EXMLRow^  parentEXMLRowByEXML_actions) {
    NewDataSet::actionsRow^  rowactionsRow = (cli::safe_cast<NewDataSet::actionsRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (parentEXMLRowByEXML_actions != nullptr) {
        columnValuesArray[1] = parentEXMLRowByEXML_actions[1];
    }
    rowactionsRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowactionsRow);
    return rowactionsRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::actionsDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::actionsDataTable::Clone() {
    NewDataSet::actionsDataTable^  cln = (cli::safe_cast<NewDataSet::actionsDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::actionsDataTable::CreateInstance() {
    return (gcnew NewDataSet::actionsDataTable());
}

inline ::System::Void NewDataSet::actionsDataTable::InitVars() {
    this->columnactions_Id = __super::Columns[L"actions_Id"];
    this->columnEXML_Id = __super::Columns[L"EXML_Id"];
}

inline ::System::Void NewDataSet::actionsDataTable::InitClass() {
    this->columnactions_Id = (gcnew ::System::Data::DataColumn(L"actions_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnactions_Id);
    this->columnEXML_Id = (gcnew ::System::Data::DataColumn(L"EXML_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnEXML_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnactions_Id}, 
            true)));
    this->columnactions_Id->AutoIncrement = true;
    this->columnactions_Id->AllowDBNull = false;
    this->columnactions_Id->Unique = true;
}

inline NewDataSet::actionsRow^  NewDataSet::actionsDataTable::NewactionsRow() {
    return (cli::safe_cast<NewDataSet::actionsRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::actionsDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::actionsRow(builder));
}

inline ::System::Type^  NewDataSet::actionsDataTable::GetRowType() {
    return NewDataSet::actionsRow::typeid;
}

inline ::System::Void NewDataSet::actionsDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->actionsRowChanged(this, (gcnew NewDataSet::actionsRowChangeEvent((cli::safe_cast<NewDataSet::actionsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::actionsDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->actionsRowChanging(this, (gcnew NewDataSet::actionsRowChangeEvent((cli::safe_cast<NewDataSet::actionsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::actionsDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->actionsRowDeleted(this, (gcnew NewDataSet::actionsRowChangeEvent((cli::safe_cast<NewDataSet::actionsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::actionsDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->actionsRowDeleting(this, (gcnew NewDataSet::actionsRowChangeEvent((cli::safe_cast<NewDataSet::actionsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::actionsDataTable::RemoveactionsRow(NewDataSet::actionsRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::actionsDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"actionsDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::blocksDataTable::blocksDataTable() {
    this->TableName = L"blocks";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::blocksDataTable::blocksDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::blocksDataTable::blocksDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::blocksDataTable::blocks_IdColumn::get() {
    return this->columnblocks_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::blocksDataTable::actions_IdColumn::get() {
    return this->columnactions_Id;
}

inline ::System::Int32 NewDataSet::blocksDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::blocksRow^  NewDataSet::blocksDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::blocksRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::blocksDataTable::AddblocksRow(NewDataSet::blocksRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::blocksRow^  NewDataSet::blocksDataTable::AddblocksRow(NewDataSet::actionsRow^  parentactionsRowByactions_blocks) {
    NewDataSet::blocksRow^  rowblocksRow = (cli::safe_cast<NewDataSet::blocksRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (parentactionsRowByactions_blocks != nullptr) {
        columnValuesArray[1] = parentactionsRowByactions_blocks[0];
    }
    rowblocksRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowblocksRow);
    return rowblocksRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::blocksDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::blocksDataTable::Clone() {
    NewDataSet::blocksDataTable^  cln = (cli::safe_cast<NewDataSet::blocksDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::blocksDataTable::CreateInstance() {
    return (gcnew NewDataSet::blocksDataTable());
}

inline ::System::Void NewDataSet::blocksDataTable::InitVars() {
    this->columnblocks_Id = __super::Columns[L"blocks_Id"];
    this->columnactions_Id = __super::Columns[L"actions_Id"];
}

inline ::System::Void NewDataSet::blocksDataTable::InitClass() {
    this->columnblocks_Id = (gcnew ::System::Data::DataColumn(L"blocks_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnblocks_Id);
    this->columnactions_Id = (gcnew ::System::Data::DataColumn(L"actions_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnactions_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnblocks_Id}, 
            true)));
    this->columnblocks_Id->AutoIncrement = true;
    this->columnblocks_Id->AllowDBNull = false;
    this->columnblocks_Id->Unique = true;
}

inline NewDataSet::blocksRow^  NewDataSet::blocksDataTable::NewblocksRow() {
    return (cli::safe_cast<NewDataSet::blocksRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::blocksDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::blocksRow(builder));
}

inline ::System::Type^  NewDataSet::blocksDataTable::GetRowType() {
    return NewDataSet::blocksRow::typeid;
}

inline ::System::Void NewDataSet::blocksDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->blocksRowChanged(this, (gcnew NewDataSet::blocksRowChangeEvent((cli::safe_cast<NewDataSet::blocksRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::blocksDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->blocksRowChanging(this, (gcnew NewDataSet::blocksRowChangeEvent((cli::safe_cast<NewDataSet::blocksRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::blocksDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->blocksRowDeleted(this, (gcnew NewDataSet::blocksRowChangeEvent((cli::safe_cast<NewDataSet::blocksRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::blocksDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->blocksRowDeleting(this, (gcnew NewDataSet::blocksRowChangeEvent((cli::safe_cast<NewDataSet::blocksRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::blocksDataTable::RemoveblocksRow(NewDataSet::blocksRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::blocksDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"blocksDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::blockDataTable::blockDataTable() {
    this->TableName = L"block";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::blockDataTable::blockDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::blockDataTable::blockDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::blockDataTable::IDColumn::get() {
    return this->columnID;
}

inline ::System::Data::DataColumn^  NewDataSet::blockDataTable::nameColumn::get() {
    return this->columnname;
}

inline ::System::Data::DataColumn^  NewDataSet::blockDataTable::block_numberColumn::get() {
    return this->columnblock_number;
}

inline ::System::Data::DataColumn^  NewDataSet::blockDataTable::nr_of_trialsColumn::get() {
    return this->columnnr_of_trials;
}

inline ::System::Data::DataColumn^  NewDataSet::blockDataTable::nr_of_internal_triggersColumn::get() {
    return this->columnnr_of_internal_triggers;
}

inline ::System::Data::DataColumn^  NewDataSet::blockDataTable::nr_of_external_triggersColumn::get() {
    return this->columnnr_of_external_triggers;
}

inline ::System::Data::DataColumn^  NewDataSet::blockDataTable::block_IdColumn::get() {
    return this->columnblock_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::blockDataTable::blocks_IdColumn::get() {
    return this->columnblocks_Id;
}

inline ::System::Int32 NewDataSet::blockDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::blockRow^  NewDataSet::blockDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::blockRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::blockDataTable::AddblockRow(NewDataSet::blockRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::blockRow^  NewDataSet::blockDataTable::AddblockRow(
            System::Int64 ID, 
            System::String^  name, 
            System::Int64 block_number, 
            System::Int64 nr_of_trials, 
            System::Int64 nr_of_internal_triggers, 
            System::Int64 nr_of_external_triggers, 
            NewDataSet::blocksRow^  parentblocksRowByblocks_block) {
    NewDataSet::blockRow^  rowblockRow = (cli::safe_cast<NewDataSet::blockRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(8) {ID, name, block_number, 
        nr_of_trials, nr_of_internal_triggers, nr_of_external_triggers, nullptr, nullptr};
    if (parentblocksRowByblocks_block != nullptr) {
        columnValuesArray[7] = parentblocksRowByblocks_block[0];
    }
    rowblockRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowblockRow);
    return rowblockRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::blockDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::blockDataTable::Clone() {
    NewDataSet::blockDataTable^  cln = (cli::safe_cast<NewDataSet::blockDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::blockDataTable::CreateInstance() {
    return (gcnew NewDataSet::blockDataTable());
}

inline ::System::Void NewDataSet::blockDataTable::InitVars() {
    this->columnID = __super::Columns[L"ID"];
    this->columnname = __super::Columns[L"name"];
    this->columnblock_number = __super::Columns[L"block_number"];
    this->columnnr_of_trials = __super::Columns[L"nr_of_trials"];
    this->columnnr_of_internal_triggers = __super::Columns[L"nr_of_internal_triggers"];
    this->columnnr_of_external_triggers = __super::Columns[L"nr_of_external_triggers"];
    this->columnblock_Id = __super::Columns[L"block_Id"];
    this->columnblocks_Id = __super::Columns[L"blocks_Id"];
}

inline ::System::Void NewDataSet::blockDataTable::InitClass() {
    this->columnID = (gcnew ::System::Data::DataColumn(L"ID", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnID);
    this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnname);
    this->columnblock_number = (gcnew ::System::Data::DataColumn(L"block_number", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnblock_number);
    this->columnnr_of_trials = (gcnew ::System::Data::DataColumn(L"nr_of_trials", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnnr_of_trials);
    this->columnnr_of_internal_triggers = (gcnew ::System::Data::DataColumn(L"nr_of_internal_triggers", ::System::Int64::typeid, 
        nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnnr_of_internal_triggers);
    this->columnnr_of_external_triggers = (gcnew ::System::Data::DataColumn(L"nr_of_external_triggers", ::System::Int64::typeid, 
        nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnnr_of_external_triggers);
    this->columnblock_Id = (gcnew ::System::Data::DataColumn(L"block_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnblock_Id);
    this->columnblocks_Id = (gcnew ::System::Data::DataColumn(L"blocks_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnblocks_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnblock_Id}, 
            true)));
    this->columnID->Namespace = L"";
    this->columnname->AllowDBNull = false;
    this->columnblock_number->AllowDBNull = false;
    this->columnnr_of_trials->AllowDBNull = false;
    this->columnnr_of_internal_triggers->AllowDBNull = false;
    this->columnnr_of_external_triggers->AllowDBNull = false;
    this->columnblock_Id->AutoIncrement = true;
    this->columnblock_Id->AllowDBNull = false;
    this->columnblock_Id->Unique = true;
}

inline NewDataSet::blockRow^  NewDataSet::blockDataTable::NewblockRow() {
    return (cli::safe_cast<NewDataSet::blockRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::blockDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::blockRow(builder));
}

inline ::System::Type^  NewDataSet::blockDataTable::GetRowType() {
    return NewDataSet::blockRow::typeid;
}

inline ::System::Void NewDataSet::blockDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->blockRowChanged(this, (gcnew NewDataSet::blockRowChangeEvent((cli::safe_cast<NewDataSet::blockRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::blockDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->blockRowChanging(this, (gcnew NewDataSet::blockRowChangeEvent((cli::safe_cast<NewDataSet::blockRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::blockDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->blockRowDeleted(this, (gcnew NewDataSet::blockRowChangeEvent((cli::safe_cast<NewDataSet::blockRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::blockDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->blockRowDeleting(this, (gcnew NewDataSet::blockRowChangeEvent((cli::safe_cast<NewDataSet::blockRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::blockDataTable::RemoveblockRow(NewDataSet::blockRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::blockDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"blockDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::loopsDataTable::loopsDataTable() {
    this->TableName = L"loops";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::loopsDataTable::loopsDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::loopsDataTable::loopsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::loopsDataTable::loops_IdColumn::get() {
    return this->columnloops_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::loopsDataTable::block_IdColumn::get() {
    return this->columnblock_Id;
}

inline ::System::Int32 NewDataSet::loopsDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::loopsRow^  NewDataSet::loopsDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::loopsRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::loopsDataTable::AddloopsRow(NewDataSet::loopsRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::loopsRow^  NewDataSet::loopsDataTable::AddloopsRow(NewDataSet::blockRow^  parentblockRowByblock_loops) {
    NewDataSet::loopsRow^  rowloopsRow = (cli::safe_cast<NewDataSet::loopsRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (parentblockRowByblock_loops != nullptr) {
        columnValuesArray[1] = parentblockRowByblock_loops[6];
    }
    rowloopsRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowloopsRow);
    return rowloopsRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::loopsDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::loopsDataTable::Clone() {
    NewDataSet::loopsDataTable^  cln = (cli::safe_cast<NewDataSet::loopsDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::loopsDataTable::CreateInstance() {
    return (gcnew NewDataSet::loopsDataTable());
}

inline ::System::Void NewDataSet::loopsDataTable::InitVars() {
    this->columnloops_Id = __super::Columns[L"loops_Id"];
    this->columnblock_Id = __super::Columns[L"block_Id"];
}

inline ::System::Void NewDataSet::loopsDataTable::InitClass() {
    this->columnloops_Id = (gcnew ::System::Data::DataColumn(L"loops_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnloops_Id);
    this->columnblock_Id = (gcnew ::System::Data::DataColumn(L"block_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnblock_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnloops_Id}, 
            true)));
    this->columnloops_Id->AutoIncrement = true;
    this->columnloops_Id->AllowDBNull = false;
    this->columnloops_Id->Unique = true;
}

inline NewDataSet::loopsRow^  NewDataSet::loopsDataTable::NewloopsRow() {
    return (cli::safe_cast<NewDataSet::loopsRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::loopsDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::loopsRow(builder));
}

inline ::System::Type^  NewDataSet::loopsDataTable::GetRowType() {
    return NewDataSet::loopsRow::typeid;
}

inline ::System::Void NewDataSet::loopsDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->loopsRowChanged(this, (gcnew NewDataSet::loopsRowChangeEvent((cli::safe_cast<NewDataSet::loopsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::loopsDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->loopsRowChanging(this, (gcnew NewDataSet::loopsRowChangeEvent((cli::safe_cast<NewDataSet::loopsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::loopsDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->loopsRowDeleted(this, (gcnew NewDataSet::loopsRowChangeEvent((cli::safe_cast<NewDataSet::loopsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::loopsDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->loopsRowDeleting(this, (gcnew NewDataSet::loopsRowChangeEvent((cli::safe_cast<NewDataSet::loopsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::loopsDataTable::RemoveloopsRow(NewDataSet::loopsRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::loopsDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"loopsDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::loopDataTable::loopDataTable() {
    this->TableName = L"loop";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::loopDataTable::loopDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::loopDataTable::loopDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::loopDataTable::IDColumn::get() {
    return this->columnID;
}

inline ::System::Data::DataColumn^  NewDataSet::loopDataTable::nameColumn::get() {
    return this->columnname;
}

inline ::System::Data::DataColumn^  NewDataSet::loopDataTable::loop_numberColumn::get() {
    return this->columnloop_number;
}

inline ::System::Data::DataColumn^  NewDataSet::loopDataTable::nr_of_loopsColumn::get() {
    return this->columnnr_of_loops;
}

inline ::System::Data::DataColumn^  NewDataSet::loopDataTable::target_blockColumn::get() {
    return this->columntarget_block;
}

inline ::System::Data::DataColumn^  NewDataSet::loopDataTable::loops_IdColumn::get() {
    return this->columnloops_Id;
}

inline ::System::Int32 NewDataSet::loopDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::loopRow^  NewDataSet::loopDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::loopRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::loopDataTable::AddloopRow(NewDataSet::loopRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::loopRow^  NewDataSet::loopDataTable::AddloopRow(
            System::Int64 ID, 
            System::String^  name, 
            System::Int64 loop_number, 
            System::Int64 nr_of_loops, 
            System::Int64 target_block, 
            NewDataSet::loopsRow^  parentloopsRowByloops_loop) {
    NewDataSet::loopRow^  rowloopRow = (cli::safe_cast<NewDataSet::loopRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(6) {ID, name, loop_number, 
        nr_of_loops, target_block, nullptr};
    if (parentloopsRowByloops_loop != nullptr) {
        columnValuesArray[5] = parentloopsRowByloops_loop[0];
    }
    rowloopRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowloopRow);
    return rowloopRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::loopDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::loopDataTable::Clone() {
    NewDataSet::loopDataTable^  cln = (cli::safe_cast<NewDataSet::loopDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::loopDataTable::CreateInstance() {
    return (gcnew NewDataSet::loopDataTable());
}

inline ::System::Void NewDataSet::loopDataTable::InitVars() {
    this->columnID = __super::Columns[L"ID"];
    this->columnname = __super::Columns[L"name"];
    this->columnloop_number = __super::Columns[L"loop_number"];
    this->columnnr_of_loops = __super::Columns[L"nr_of_loops"];
    this->columntarget_block = __super::Columns[L"target_block"];
    this->columnloops_Id = __super::Columns[L"loops_Id"];
}

inline ::System::Void NewDataSet::loopDataTable::InitClass() {
    this->columnID = (gcnew ::System::Data::DataColumn(L"ID", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnID);
    this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnname);
    this->columnloop_number = (gcnew ::System::Data::DataColumn(L"loop_number", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnloop_number);
    this->columnnr_of_loops = (gcnew ::System::Data::DataColumn(L"nr_of_loops", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnnr_of_loops);
    this->columntarget_block = (gcnew ::System::Data::DataColumn(L"target_block", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columntarget_block);
    this->columnloops_Id = (gcnew ::System::Data::DataColumn(L"loops_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnloops_Id);
    this->columnID->Namespace = L"";
    this->columnname->AllowDBNull = false;
    this->columnloop_number->AllowDBNull = false;
    this->columnnr_of_loops->AllowDBNull = false;
    this->columntarget_block->AllowDBNull = false;
}

inline NewDataSet::loopRow^  NewDataSet::loopDataTable::NewloopRow() {
    return (cli::safe_cast<NewDataSet::loopRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::loopDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::loopRow(builder));
}

inline ::System::Type^  NewDataSet::loopDataTable::GetRowType() {
    return NewDataSet::loopRow::typeid;
}

inline ::System::Void NewDataSet::loopDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->loopRowChanged(this, (gcnew NewDataSet::loopRowChangeEvent((cli::safe_cast<NewDataSet::loopRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::loopDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->loopRowChanging(this, (gcnew NewDataSet::loopRowChangeEvent((cli::safe_cast<NewDataSet::loopRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::loopDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->loopRowDeleted(this, (gcnew NewDataSet::loopRowChangeEvent((cli::safe_cast<NewDataSet::loopRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::loopDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->loopRowDeleting(this, (gcnew NewDataSet::loopRowChangeEvent((cli::safe_cast<NewDataSet::loopRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::loopDataTable::RemoveloopRow(NewDataSet::loopRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::loopDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"loopDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::finalizationsDataTable::finalizationsDataTable() {
    this->TableName = L"finalizations";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::finalizationsDataTable::finalizationsDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::finalizationsDataTable::finalizationsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::finalizationsDataTable::finalizations_IdColumn::get() {
    return this->columnfinalizations_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::finalizationsDataTable::EXML_IdColumn::get() {
    return this->columnEXML_Id;
}

inline ::System::Int32 NewDataSet::finalizationsDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::finalizationsRow^  NewDataSet::finalizationsDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::finalizationsRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::finalizationsDataTable::AddfinalizationsRow(NewDataSet::finalizationsRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::finalizationsRow^  NewDataSet::finalizationsDataTable::AddfinalizationsRow(NewDataSet::EXMLRow^  parentEXMLRowByEXML_finalizations) {
    NewDataSet::finalizationsRow^  rowfinalizationsRow = (cli::safe_cast<NewDataSet::finalizationsRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (parentEXMLRowByEXML_finalizations != nullptr) {
        columnValuesArray[1] = parentEXMLRowByEXML_finalizations[1];
    }
    rowfinalizationsRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowfinalizationsRow);
    return rowfinalizationsRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::finalizationsDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::finalizationsDataTable::Clone() {
    NewDataSet::finalizationsDataTable^  cln = (cli::safe_cast<NewDataSet::finalizationsDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::finalizationsDataTable::CreateInstance() {
    return (gcnew NewDataSet::finalizationsDataTable());
}

inline ::System::Void NewDataSet::finalizationsDataTable::InitVars() {
    this->columnfinalizations_Id = __super::Columns[L"finalizations_Id"];
    this->columnEXML_Id = __super::Columns[L"EXML_Id"];
}

inline ::System::Void NewDataSet::finalizationsDataTable::InitClass() {
    this->columnfinalizations_Id = (gcnew ::System::Data::DataColumn(L"finalizations_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnfinalizations_Id);
    this->columnEXML_Id = (gcnew ::System::Data::DataColumn(L"EXML_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnEXML_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnfinalizations_Id}, 
            true)));
    this->columnfinalizations_Id->AutoIncrement = true;
    this->columnfinalizations_Id->AllowDBNull = false;
    this->columnfinalizations_Id->Unique = true;
}

inline NewDataSet::finalizationsRow^  NewDataSet::finalizationsDataTable::NewfinalizationsRow() {
    return (cli::safe_cast<NewDataSet::finalizationsRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::finalizationsDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::finalizationsRow(builder));
}

inline ::System::Type^  NewDataSet::finalizationsDataTable::GetRowType() {
    return NewDataSet::finalizationsRow::typeid;
}

inline ::System::Void NewDataSet::finalizationsDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->finalizationsRowChanged(this, (gcnew NewDataSet::finalizationsRowChangeEvent((cli::safe_cast<NewDataSet::finalizationsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::finalizationsDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->finalizationsRowChanging(this, (gcnew NewDataSet::finalizationsRowChangeEvent((cli::safe_cast<NewDataSet::finalizationsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::finalizationsDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->finalizationsRowDeleted(this, (gcnew NewDataSet::finalizationsRowChangeEvent((cli::safe_cast<NewDataSet::finalizationsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::finalizationsDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->finalizationsRowDeleting(this, (gcnew NewDataSet::finalizationsRowChangeEvent((cli::safe_cast<NewDataSet::finalizationsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::finalizationsDataTable::RemovefinalizationsRow(NewDataSet::finalizationsRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::finalizationsDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"finalizationsDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::finalizationDataTable::finalizationDataTable() {
    this->TableName = L"finalization";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::finalizationDataTable::finalizationDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::finalizationDataTable::finalizationDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::finalizationDataTable::IDColumn::get() {
    return this->columnID;
}

inline ::System::Data::DataColumn^  NewDataSet::finalizationDataTable::finalization_IdColumn::get() {
    return this->columnfinalization_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::finalizationDataTable::finalizations_IdColumn::get() {
    return this->columnfinalizations_Id;
}

inline ::System::Int32 NewDataSet::finalizationDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::finalizationRow^  NewDataSet::finalizationDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::finalizationRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::finalizationDataTable::AddfinalizationRow(NewDataSet::finalizationRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::finalizationRow^  NewDataSet::finalizationDataTable::AddfinalizationRow(System::Int64 ID, NewDataSet::finalizationsRow^  parentfinalizationsRowByfinalizations_finalization) {
    NewDataSet::finalizationRow^  rowfinalizationRow = (cli::safe_cast<NewDataSet::finalizationRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {ID, nullptr, nullptr};
    if (parentfinalizationsRowByfinalizations_finalization != nullptr) {
        columnValuesArray[2] = parentfinalizationsRowByfinalizations_finalization[0];
    }
    rowfinalizationRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowfinalizationRow);
    return rowfinalizationRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::finalizationDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::finalizationDataTable::Clone() {
    NewDataSet::finalizationDataTable^  cln = (cli::safe_cast<NewDataSet::finalizationDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::finalizationDataTable::CreateInstance() {
    return (gcnew NewDataSet::finalizationDataTable());
}

inline ::System::Void NewDataSet::finalizationDataTable::InitVars() {
    this->columnID = __super::Columns[L"ID"];
    this->columnfinalization_Id = __super::Columns[L"finalization_Id"];
    this->columnfinalizations_Id = __super::Columns[L"finalizations_Id"];
}

inline ::System::Void NewDataSet::finalizationDataTable::InitClass() {
    this->columnID = (gcnew ::System::Data::DataColumn(L"ID", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnID);
    this->columnfinalization_Id = (gcnew ::System::Data::DataColumn(L"finalization_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnfinalization_Id);
    this->columnfinalizations_Id = (gcnew ::System::Data::DataColumn(L"finalizations_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnfinalizations_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnfinalization_Id}, 
            true)));
    this->columnID->Namespace = L"";
    this->columnfinalization_Id->AutoIncrement = true;
    this->columnfinalization_Id->AllowDBNull = false;
    this->columnfinalization_Id->Unique = true;
}

inline NewDataSet::finalizationRow^  NewDataSet::finalizationDataTable::NewfinalizationRow() {
    return (cli::safe_cast<NewDataSet::finalizationRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::finalizationDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::finalizationRow(builder));
}

inline ::System::Type^  NewDataSet::finalizationDataTable::GetRowType() {
    return NewDataSet::finalizationRow::typeid;
}

inline ::System::Void NewDataSet::finalizationDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->finalizationRowChanged(this, (gcnew NewDataSet::finalizationRowChangeEvent((cli::safe_cast<NewDataSet::finalizationRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::finalizationDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->finalizationRowChanging(this, (gcnew NewDataSet::finalizationRowChangeEvent((cli::safe_cast<NewDataSet::finalizationRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::finalizationDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->finalizationRowDeleted(this, (gcnew NewDataSet::finalizationRowChangeEvent((cli::safe_cast<NewDataSet::finalizationRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::finalizationDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->finalizationRowDeleting(this, (gcnew NewDataSet::finalizationRowChangeEvent((cli::safe_cast<NewDataSet::finalizationRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::finalizationDataTable::RemovefinalizationRow(NewDataSet::finalizationRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::finalizationDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"finalizationDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::EXMLRow::EXMLRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableEXML = (cli::safe_cast<NewDataSet::EXMLDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::EXMLRow::version::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tableEXML->versionColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'version\' in table \'EXML\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::EXMLRow::version::set(System::String^  value) {
    this[this->tableEXML->versionColumn] = value;
}

inline System::Int32 NewDataSet::EXMLRow::EXML_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableEXML->EXML_IdColumn]));
}
inline System::Void NewDataSet::EXMLRow::EXML_Id::set(System::Int32 value) {
    this[this->tableEXML->EXML_IdColumn] = value;
}

inline ::System::Boolean NewDataSet::EXMLRow::IsversionNull() {
    return this->IsNull(this->tableEXML->versionColumn);
}

inline ::System::Void NewDataSet::EXMLRow::SetversionNull() {
    this[this->tableEXML->versionColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::definesRow^  >^  NewDataSet::EXMLRow::GetdefinesRows() {
    if (this->Table->ChildRelations[L"EXML_defines"] == nullptr) {
        return gcnew cli::array< NewDataSet::definesRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::definesRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"EXML_defines"])));
    }
}

inline cli::array< NewDataSet::declarationsRow^  >^  NewDataSet::EXMLRow::GetdeclarationsRows() {
    if (this->Table->ChildRelations[L"EXML_declarations"] == nullptr) {
        return gcnew cli::array< NewDataSet::declarationsRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::declarationsRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"EXML_declarations"])));
    }
}

inline cli::array< NewDataSet::connectionsRow^  >^  NewDataSet::EXMLRow::GetconnectionsRows() {
    if (this->Table->ChildRelations[L"EXML_connections"] == nullptr) {
        return gcnew cli::array< NewDataSet::connectionsRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::connectionsRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"EXML_connections"])));
    }
}

inline cli::array< NewDataSet::initializationsRow^  >^  NewDataSet::EXMLRow::GetinitializationsRows() {
    if (this->Table->ChildRelations[L"EXML_initializations"] == nullptr) {
        return gcnew cli::array< NewDataSet::initializationsRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::initializationsRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"EXML_initializations"])));
    }
}

inline cli::array< NewDataSet::actionsRow^  >^  NewDataSet::EXMLRow::GetactionsRows() {
    if (this->Table->ChildRelations[L"EXML_actions"] == nullptr) {
        return gcnew cli::array< NewDataSet::actionsRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::actionsRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"EXML_actions"])));
    }
}

inline cli::array< NewDataSet::finalizationsRow^  >^  NewDataSet::EXMLRow::GetfinalizationsRows() {
    if (this->Table->ChildRelations[L"EXML_finalizations"] == nullptr) {
        return gcnew cli::array< NewDataSet::finalizationsRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::finalizationsRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"EXML_finalizations"])));
    }
}


inline NewDataSet::definesRow::definesRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tabledefines = (cli::safe_cast<NewDataSet::definesDataTable^  >(this->Table));
}

inline System::Int32 NewDataSet::definesRow::defines_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tabledefines->defines_IdColumn]));
}
inline System::Void NewDataSet::definesRow::defines_Id::set(System::Int32 value) {
    this[this->tabledefines->defines_IdColumn] = value;
}

inline System::Int32 NewDataSet::definesRow::EXML_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tabledefines->EXML_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'EXML_Id\' in table \'defines\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::definesRow::EXML_Id::set(System::Int32 value) {
    this[this->tabledefines->EXML_IdColumn] = value;
}

inline NewDataSet::EXMLRow^  NewDataSet::definesRow::EXMLRow::get() {
    return (cli::safe_cast<NewDataSet::EXMLRow^  >(this->GetParentRow(this->Table->ParentRelations[L"EXML_defines"])));
}
inline System::Void NewDataSet::definesRow::EXMLRow::set(NewDataSet::EXMLRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"EXML_defines"]);
}

inline ::System::Boolean NewDataSet::definesRow::IsEXML_IdNull() {
    return this->IsNull(this->tabledefines->EXML_IdColumn);
}

inline ::System::Void NewDataSet::definesRow::SetEXML_IdNull() {
    this[this->tabledefines->EXML_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::experimentRow^  >^  NewDataSet::definesRow::GetexperimentRows() {
    if (this->Table->ChildRelations[L"defines_experiment"] == nullptr) {
        return gcnew cli::array< NewDataSet::experimentRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::experimentRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"defines_experiment"])));
    }
}


inline NewDataSet::experimentRow::experimentRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableexperiment = (cli::safe_cast<NewDataSet::experimentDataTable^  >(this->Table));
}

inline System::Int64 NewDataSet::experimentRow::ID::get() {
    try {
        return (cli::safe_cast<::System::Int64 >(this[this->tableexperiment->IDColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ID\' in table \'experiment\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::experimentRow::ID::set(System::Int64 value) {
    this[this->tableexperiment->IDColumn] = value;
}

inline System::String^  NewDataSet::experimentRow::name::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableexperiment->nameColumn]));
}
inline System::Void NewDataSet::experimentRow::name::set(System::String^  value) {
    this[this->tableexperiment->nameColumn] = value;
}

inline System::String^  NewDataSet::experimentRow::debugmode::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableexperiment->debugmodeColumn]));
}
inline System::Void NewDataSet::experimentRow::debugmode::set(System::String^  value) {
    this[this->tableexperiment->debugmodeColumn] = value;
}

inline System::Int32 NewDataSet::experimentRow::defines_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableexperiment->defines_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'defines_Id\' in table \'experiment\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::experimentRow::defines_Id::set(System::Int32 value) {
    this[this->tableexperiment->defines_IdColumn] = value;
}

inline NewDataSet::definesRow^  NewDataSet::experimentRow::definesRow::get() {
    return (cli::safe_cast<NewDataSet::definesRow^  >(this->GetParentRow(this->Table->ParentRelations[L"defines_experiment"])));
}
inline System::Void NewDataSet::experimentRow::definesRow::set(NewDataSet::definesRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"defines_experiment"]);
}

inline ::System::Boolean NewDataSet::experimentRow::IsIDNull() {
    return this->IsNull(this->tableexperiment->IDColumn);
}

inline ::System::Void NewDataSet::experimentRow::SetIDNull() {
    this[this->tableexperiment->IDColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::experimentRow::Isdefines_IdNull() {
    return this->IsNull(this->tableexperiment->defines_IdColumn);
}

inline ::System::Void NewDataSet::experimentRow::Setdefines_IdNull() {
    this[this->tableexperiment->defines_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::declarationsRow::declarationsRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tabledeclarations = (cli::safe_cast<NewDataSet::declarationsDataTable^  >(this->Table));
}

inline System::Int32 NewDataSet::declarationsRow::declarations_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tabledeclarations->declarations_IdColumn]));
}
inline System::Void NewDataSet::declarationsRow::declarations_Id::set(System::Int32 value) {
    this[this->tabledeclarations->declarations_IdColumn] = value;
}

inline System::Int32 NewDataSet::declarationsRow::EXML_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tabledeclarations->EXML_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'EXML_Id\' in table \'declarations\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::declarationsRow::EXML_Id::set(System::Int32 value) {
    this[this->tabledeclarations->EXML_IdColumn] = value;
}

inline NewDataSet::EXMLRow^  NewDataSet::declarationsRow::EXMLRow::get() {
    return (cli::safe_cast<NewDataSet::EXMLRow^  >(this->GetParentRow(this->Table->ParentRelations[L"EXML_declarations"])));
}
inline System::Void NewDataSet::declarationsRow::EXMLRow::set(NewDataSet::EXMLRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"EXML_declarations"]);
}

inline ::System::Boolean NewDataSet::declarationsRow::IsEXML_IdNull() {
    return this->IsNull(this->tabledeclarations->EXML_IdColumn);
}

inline ::System::Void NewDataSet::declarationsRow::SetEXML_IdNull() {
    this[this->tabledeclarations->EXML_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::objectRow^  >^  NewDataSet::declarationsRow::GetobjectRows() {
    if (this->Table->ChildRelations[L"declarations_object"] == nullptr) {
        return gcnew cli::array< NewDataSet::objectRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::objectRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"declarations_object"])));
    }
}


inline NewDataSet::objectRow::objectRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableobject = (cli::safe_cast<NewDataSet::objectDataTable^  >(this->Table));
}

inline System::Int64 NewDataSet::objectRow::ID::get() {
    try {
        return (cli::safe_cast<::System::Int64 >(this[this->tableobject->IDColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ID\' in table \'object\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::objectRow::ID::set(System::Int64 value) {
    this[this->tableobject->IDColumn] = value;
}

inline System::String^  NewDataSet::objectRow::_class::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableobject->_classColumn]));
}
inline System::Void NewDataSet::objectRow::_class::set(System::String^  value) {
    this[this->tableobject->_classColumn] = value;
}

inline System::String^  NewDataSet::objectRow::name::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableobject->nameColumn]));
}
inline System::Void NewDataSet::objectRow::name::set(System::String^  value) {
    this[this->tableobject->nameColumn] = value;
}

inline System::Int32 NewDataSet::objectRow::object_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableobject->object_IdColumn]));
}
inline System::Void NewDataSet::objectRow::object_Id::set(System::Int32 value) {
    this[this->tableobject->object_IdColumn] = value;
}

inline System::Int32 NewDataSet::objectRow::declarations_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableobject->declarations_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'declarations_Id\' in table \'object\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::objectRow::declarations_Id::set(System::Int32 value) {
    this[this->tableobject->declarations_IdColumn] = value;
}

inline System::Int32 NewDataSet::objectRow::initialization_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableobject->initialization_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'initialization_Id\' in table \'object\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::objectRow::initialization_Id::set(System::Int32 value) {
    this[this->tableobject->initialization_IdColumn] = value;
}

inline System::Int32 NewDataSet::objectRow::block_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableobject->block_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'block_Id\' in table \'object\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::objectRow::block_Id::set(System::Int32 value) {
    this[this->tableobject->block_IdColumn] = value;
}

inline System::Int32 NewDataSet::objectRow::finalization_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableobject->finalization_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'finalization_Id\' in table \'object\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::objectRow::finalization_Id::set(System::Int32 value) {
    this[this->tableobject->finalization_IdColumn] = value;
}

inline NewDataSet::declarationsRow^  NewDataSet::objectRow::declarationsRow::get() {
    return (cli::safe_cast<NewDataSet::declarationsRow^  >(this->GetParentRow(this->Table->ParentRelations[L"declarations_object"])));
}
inline System::Void NewDataSet::objectRow::declarationsRow::set(NewDataSet::declarationsRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"declarations_object"]);
}

inline NewDataSet::initializationRow^  NewDataSet::objectRow::initializationRow::get() {
    return (cli::safe_cast<NewDataSet::initializationRow^  >(this->GetParentRow(this->Table->ParentRelations[L"initialization_object"])));
}
inline System::Void NewDataSet::objectRow::initializationRow::set(NewDataSet::initializationRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"initialization_object"]);
}

inline NewDataSet::blockRow^  NewDataSet::objectRow::blockRow::get() {
    return (cli::safe_cast<NewDataSet::blockRow^  >(this->GetParentRow(this->Table->ParentRelations[L"block_object"])));
}
inline System::Void NewDataSet::objectRow::blockRow::set(NewDataSet::blockRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"block_object"]);
}

inline NewDataSet::finalizationRow^  NewDataSet::objectRow::finalizationRow::get() {
    return (cli::safe_cast<NewDataSet::finalizationRow^  >(this->GetParentRow(this->Table->ParentRelations[L"finalization_object"])));
}
inline System::Void NewDataSet::objectRow::finalizationRow::set(NewDataSet::finalizationRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"finalization_object"]);
}

inline ::System::Boolean NewDataSet::objectRow::IsIDNull() {
    return this->IsNull(this->tableobject->IDColumn);
}

inline ::System::Void NewDataSet::objectRow::SetIDNull() {
    this[this->tableobject->IDColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::objectRow::Isdeclarations_IdNull() {
    return this->IsNull(this->tableobject->declarations_IdColumn);
}

inline ::System::Void NewDataSet::objectRow::Setdeclarations_IdNull() {
    this[this->tableobject->declarations_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::objectRow::Isinitialization_IdNull() {
    return this->IsNull(this->tableobject->initialization_IdColumn);
}

inline ::System::Void NewDataSet::objectRow::Setinitialization_IdNull() {
    this[this->tableobject->initialization_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::objectRow::Isblock_IdNull() {
    return this->IsNull(this->tableobject->block_IdColumn);
}

inline ::System::Void NewDataSet::objectRow::Setblock_IdNull() {
    this[this->tableobject->block_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::objectRow::Isfinalization_IdNull() {
    return this->IsNull(this->tableobject->finalization_IdColumn);
}

inline ::System::Void NewDataSet::objectRow::Setfinalization_IdNull() {
    this[this->tableobject->finalization_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::definitionsRow^  >^  NewDataSet::objectRow::GetdefinitionsRows() {
    if (this->Table->ChildRelations[L"object_definitions"] == nullptr) {
        return gcnew cli::array< NewDataSet::definitionsRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::definitionsRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"object_definitions"])));
    }
}


inline NewDataSet::definitionsRow::definitionsRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tabledefinitions = (cli::safe_cast<NewDataSet::definitionsDataTable^  >(this->Table));
}

inline System::Int32 NewDataSet::definitionsRow::definitions_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tabledefinitions->definitions_IdColumn]));
}
inline System::Void NewDataSet::definitionsRow::definitions_Id::set(System::Int32 value) {
    this[this->tabledefinitions->definitions_IdColumn] = value;
}

inline System::Int32 NewDataSet::definitionsRow::object_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tabledefinitions->object_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'object_Id\' in table \'definitions\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::definitionsRow::object_Id::set(System::Int32 value) {
    this[this->tabledefinitions->object_IdColumn] = value;
}

inline NewDataSet::objectRow^  NewDataSet::definitionsRow::objectRow::get() {
    return (cli::safe_cast<NewDataSet::objectRow^  >(this->GetParentRow(this->Table->ParentRelations[L"object_definitions"])));
}
inline System::Void NewDataSet::definitionsRow::objectRow::set(NewDataSet::objectRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"object_definitions"]);
}

inline ::System::Boolean NewDataSet::definitionsRow::Isobject_IdNull() {
    return this->IsNull(this->tabledefinitions->object_IdColumn);
}

inline ::System::Void NewDataSet::definitionsRow::Setobject_IdNull() {
    this[this->tabledefinitions->object_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::definitionRow^  >^  NewDataSet::definitionsRow::GetdefinitionRows() {
    if (this->Table->ChildRelations[L"definitions_definition"] == nullptr) {
        return gcnew cli::array< NewDataSet::definitionRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::definitionRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"definitions_definition"])));
    }
}


inline NewDataSet::definitionRow::definitionRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tabledefinition = (cli::safe_cast<NewDataSet::definitionDataTable^  >(this->Table));
}

inline System::Int64 NewDataSet::definitionRow::ID::get() {
    try {
        return (cli::safe_cast<::System::Int64 >(this[this->tabledefinition->IDColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ID\' in table \'definition\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::definitionRow::ID::set(System::Int64 value) {
    this[this->tabledefinition->IDColumn] = value;
}

inline System::String^  NewDataSet::definitionRow::file::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tabledefinition->fileColumn]));
}
inline System::Void NewDataSet::definitionRow::file::set(System::String^  value) {
    this[this->tabledefinition->fileColumn] = value;
}

inline System::Int32 NewDataSet::definitionRow::definitions_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tabledefinition->definitions_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'definitions_Id\' in table \'definition\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::definitionRow::definitions_Id::set(System::Int32 value) {
    this[this->tabledefinition->definitions_IdColumn] = value;
}

inline NewDataSet::definitionsRow^  NewDataSet::definitionRow::definitionsRow::get() {
    return (cli::safe_cast<NewDataSet::definitionsRow^  >(this->GetParentRow(this->Table->ParentRelations[L"definitions_definition"])));
}
inline System::Void NewDataSet::definitionRow::definitionsRow::set(NewDataSet::definitionsRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"definitions_definition"]);
}

inline ::System::Boolean NewDataSet::definitionRow::IsIDNull() {
    return this->IsNull(this->tabledefinition->IDColumn);
}

inline ::System::Void NewDataSet::definitionRow::SetIDNull() {
    this[this->tabledefinition->IDColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::definitionRow::Isdefinitions_IdNull() {
    return this->IsNull(this->tabledefinition->definitions_IdColumn);
}

inline ::System::Void NewDataSet::definitionRow::Setdefinitions_IdNull() {
    this[this->tabledefinition->definitions_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::connectionsRow::connectionsRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableconnections = (cli::safe_cast<NewDataSet::connectionsDataTable^  >(this->Table));
}

inline System::Int32 NewDataSet::connectionsRow::connections_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableconnections->connections_IdColumn]));
}
inline System::Void NewDataSet::connectionsRow::connections_Id::set(System::Int32 value) {
    this[this->tableconnections->connections_IdColumn] = value;
}

inline System::Int32 NewDataSet::connectionsRow::EXML_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableconnections->EXML_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'EXML_Id\' in table \'connections\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::connectionsRow::EXML_Id::set(System::Int32 value) {
    this[this->tableconnections->EXML_IdColumn] = value;
}

inline NewDataSet::EXMLRow^  NewDataSet::connectionsRow::EXMLRow::get() {
    return (cli::safe_cast<NewDataSet::EXMLRow^  >(this->GetParentRow(this->Table->ParentRelations[L"EXML_connections"])));
}
inline System::Void NewDataSet::connectionsRow::EXMLRow::set(NewDataSet::EXMLRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"EXML_connections"]);
}

inline ::System::Boolean NewDataSet::connectionsRow::IsEXML_IdNull() {
    return this->IsNull(this->tableconnections->EXML_IdColumn);
}

inline ::System::Void NewDataSet::connectionsRow::SetEXML_IdNull() {
    this[this->tableconnections->EXML_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::connectionRow^  >^  NewDataSet::connectionsRow::GetconnectionRows() {
    if (this->Table->ChildRelations[L"connections_connection"] == nullptr) {
        return gcnew cli::array< NewDataSet::connectionRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::connectionRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"connections_connection"])));
    }
}


inline NewDataSet::connectionRow::connectionRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableconnection = (cli::safe_cast<NewDataSet::connectionDataTable^  >(this->Table));
}

inline System::Int64 NewDataSet::connectionRow::ID::get() {
    try {
        return (cli::safe_cast<::System::Int64 >(this[this->tableconnection->IDColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ID\' in table \'connection\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::connectionRow::ID::set(System::Int64 value) {
    this[this->tableconnection->IDColumn] = value;
}

inline System::Int32 NewDataSet::connectionRow::connection_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableconnection->connection_IdColumn]));
}
inline System::Void NewDataSet::connectionRow::connection_Id::set(System::Int32 value) {
    this[this->tableconnection->connection_IdColumn] = value;
}

inline System::Int32 NewDataSet::connectionRow::connections_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableconnection->connections_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'connections_Id\' in table \'connection\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::connectionRow::connections_Id::set(System::Int32 value) {
    this[this->tableconnection->connections_IdColumn] = value;
}

inline NewDataSet::connectionsRow^  NewDataSet::connectionRow::connectionsRow::get() {
    return (cli::safe_cast<NewDataSet::connectionsRow^  >(this->GetParentRow(this->Table->ParentRelations[L"connections_connection"])));
}
inline System::Void NewDataSet::connectionRow::connectionsRow::set(NewDataSet::connectionsRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"connections_connection"]);
}

inline ::System::Boolean NewDataSet::connectionRow::IsIDNull() {
    return this->IsNull(this->tableconnection->IDColumn);
}

inline ::System::Void NewDataSet::connectionRow::SetIDNull() {
    this[this->tableconnection->IDColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::connectionRow::Isconnections_IdNull() {
    return this->IsNull(this->tableconnection->connections_IdColumn);
}

inline ::System::Void NewDataSet::connectionRow::Setconnections_IdNull() {
    this[this->tableconnection->connections_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::sourceRow^  >^  NewDataSet::connectionRow::GetsourceRows() {
    if (this->Table->ChildRelations[L"connection_source"] == nullptr) {
        return gcnew cli::array< NewDataSet::sourceRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::sourceRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"connection_source"])));
    }
}

inline cli::array< NewDataSet::targetRow^  >^  NewDataSet::connectionRow::GettargetRows() {
    if (this->Table->ChildRelations[L"connection_target"] == nullptr) {
        return gcnew cli::array< NewDataSet::targetRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::targetRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"connection_target"])));
    }
}


inline NewDataSet::sourceRow::sourceRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablesource = (cli::safe_cast<NewDataSet::sourceDataTable^  >(this->Table));
}

inline System::Int64 NewDataSet::sourceRow::object::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tablesource->objectColumn]));
}
inline System::Void NewDataSet::sourceRow::object::set(System::Int64 value) {
    this[this->tablesource->objectColumn] = value;
}

inline System::String^  NewDataSet::sourceRow::type::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablesource->typeColumn]));
}
inline System::Void NewDataSet::sourceRow::type::set(System::String^  value) {
    this[this->tablesource->typeColumn] = value;
}

inline System::String^  NewDataSet::sourceRow::signature::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablesource->signatureColumn]));
}
inline System::Void NewDataSet::sourceRow::signature::set(System::String^  value) {
    this[this->tablesource->signatureColumn] = value;
}

inline System::Int32 NewDataSet::sourceRow::connection_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablesource->connection_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'connection_Id\' in table \'source\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::sourceRow::connection_Id::set(System::Int32 value) {
    this[this->tablesource->connection_IdColumn] = value;
}

inline NewDataSet::connectionRow^  NewDataSet::sourceRow::connectionRow::get() {
    return (cli::safe_cast<NewDataSet::connectionRow^  >(this->GetParentRow(this->Table->ParentRelations[L"connection_source"])));
}
inline System::Void NewDataSet::sourceRow::connectionRow::set(NewDataSet::connectionRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"connection_source"]);
}

inline ::System::Boolean NewDataSet::sourceRow::Isconnection_IdNull() {
    return this->IsNull(this->tablesource->connection_IdColumn);
}

inline ::System::Void NewDataSet::sourceRow::Setconnection_IdNull() {
    this[this->tablesource->connection_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::targetRow::targetRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tabletarget = (cli::safe_cast<NewDataSet::targetDataTable^  >(this->Table));
}

inline System::Int64 NewDataSet::targetRow::object::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tabletarget->objectColumn]));
}
inline System::Void NewDataSet::targetRow::object::set(System::Int64 value) {
    this[this->tabletarget->objectColumn] = value;
}

inline System::String^  NewDataSet::targetRow::type::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tabletarget->typeColumn]));
}
inline System::Void NewDataSet::targetRow::type::set(System::String^  value) {
    this[this->tabletarget->typeColumn] = value;
}

inline System::String^  NewDataSet::targetRow::signature::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tabletarget->signatureColumn]));
}
inline System::Void NewDataSet::targetRow::signature::set(System::String^  value) {
    this[this->tabletarget->signatureColumn] = value;
}

inline System::Int32 NewDataSet::targetRow::connection_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tabletarget->connection_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'connection_Id\' in table \'target\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::targetRow::connection_Id::set(System::Int32 value) {
    this[this->tabletarget->connection_IdColumn] = value;
}

inline NewDataSet::connectionRow^  NewDataSet::targetRow::connectionRow::get() {
    return (cli::safe_cast<NewDataSet::connectionRow^  >(this->GetParentRow(this->Table->ParentRelations[L"connection_target"])));
}
inline System::Void NewDataSet::targetRow::connectionRow::set(NewDataSet::connectionRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"connection_target"]);
}

inline ::System::Boolean NewDataSet::targetRow::Isconnection_IdNull() {
    return this->IsNull(this->tabletarget->connection_IdColumn);
}

inline ::System::Void NewDataSet::targetRow::Setconnection_IdNull() {
    this[this->tabletarget->connection_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::initializationsRow::initializationsRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableinitializations = (cli::safe_cast<NewDataSet::initializationsDataTable^  >(this->Table));
}

inline System::Int32 NewDataSet::initializationsRow::initializations_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableinitializations->initializations_IdColumn]));
}
inline System::Void NewDataSet::initializationsRow::initializations_Id::set(System::Int32 value) {
    this[this->tableinitializations->initializations_IdColumn] = value;
}

inline System::Int32 NewDataSet::initializationsRow::EXML_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableinitializations->EXML_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'EXML_Id\' in table \'initializations\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::initializationsRow::EXML_Id::set(System::Int32 value) {
    this[this->tableinitializations->EXML_IdColumn] = value;
}

inline NewDataSet::EXMLRow^  NewDataSet::initializationsRow::EXMLRow::get() {
    return (cli::safe_cast<NewDataSet::EXMLRow^  >(this->GetParentRow(this->Table->ParentRelations[L"EXML_initializations"])));
}
inline System::Void NewDataSet::initializationsRow::EXMLRow::set(NewDataSet::EXMLRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"EXML_initializations"]);
}

inline ::System::Boolean NewDataSet::initializationsRow::IsEXML_IdNull() {
    return this->IsNull(this->tableinitializations->EXML_IdColumn);
}

inline ::System::Void NewDataSet::initializationsRow::SetEXML_IdNull() {
    this[this->tableinitializations->EXML_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::initializationRow^  >^  NewDataSet::initializationsRow::GetinitializationRows() {
    if (this->Table->ChildRelations[L"initializations_initialization"] == nullptr) {
        return gcnew cli::array< NewDataSet::initializationRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::initializationRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"initializations_initialization"])));
    }
}


inline NewDataSet::initializationRow::initializationRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableinitialization = (cli::safe_cast<NewDataSet::initializationDataTable^  >(this->Table));
}

inline System::Int64 NewDataSet::initializationRow::ID::get() {
    try {
        return (cli::safe_cast<::System::Int64 >(this[this->tableinitialization->IDColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ID\' in table \'initialization\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::initializationRow::ID::set(System::Int64 value) {
    this[this->tableinitialization->IDColumn] = value;
}

inline System::Int32 NewDataSet::initializationRow::initialization_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableinitialization->initialization_IdColumn]));
}
inline System::Void NewDataSet::initializationRow::initialization_Id::set(System::Int32 value) {
    this[this->tableinitialization->initialization_IdColumn] = value;
}

inline System::Int32 NewDataSet::initializationRow::initializations_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableinitialization->initializations_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'initializations_Id\' in table \'initialization\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::initializationRow::initializations_Id::set(System::Int32 value) {
    this[this->tableinitialization->initializations_IdColumn] = value;
}

inline NewDataSet::initializationsRow^  NewDataSet::initializationRow::initializationsRow::get() {
    return (cli::safe_cast<NewDataSet::initializationsRow^  >(this->GetParentRow(this->Table->ParentRelations[L"initializations_initialization"])));
}
inline System::Void NewDataSet::initializationRow::initializationsRow::set(NewDataSet::initializationsRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"initializations_initialization"]);
}

inline ::System::Boolean NewDataSet::initializationRow::IsIDNull() {
    return this->IsNull(this->tableinitialization->IDColumn);
}

inline ::System::Void NewDataSet::initializationRow::SetIDNull() {
    this[this->tableinitialization->IDColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::initializationRow::Isinitializations_IdNull() {
    return this->IsNull(this->tableinitialization->initializations_IdColumn);
}

inline ::System::Void NewDataSet::initializationRow::Setinitializations_IdNull() {
    this[this->tableinitialization->initializations_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::objectRow^  >^  NewDataSet::initializationRow::GetobjectRows() {
    if (this->Table->ChildRelations[L"initialization_object"] == nullptr) {
        return gcnew cli::array< NewDataSet::objectRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::objectRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"initialization_object"])));
    }
}


inline NewDataSet::actionsRow::actionsRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableactions = (cli::safe_cast<NewDataSet::actionsDataTable^  >(this->Table));
}

inline System::Int32 NewDataSet::actionsRow::actions_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableactions->actions_IdColumn]));
}
inline System::Void NewDataSet::actionsRow::actions_Id::set(System::Int32 value) {
    this[this->tableactions->actions_IdColumn] = value;
}

inline System::Int32 NewDataSet::actionsRow::EXML_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableactions->EXML_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'EXML_Id\' in table \'actions\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::actionsRow::EXML_Id::set(System::Int32 value) {
    this[this->tableactions->EXML_IdColumn] = value;
}

inline NewDataSet::EXMLRow^  NewDataSet::actionsRow::EXMLRow::get() {
    return (cli::safe_cast<NewDataSet::EXMLRow^  >(this->GetParentRow(this->Table->ParentRelations[L"EXML_actions"])));
}
inline System::Void NewDataSet::actionsRow::EXMLRow::set(NewDataSet::EXMLRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"EXML_actions"]);
}

inline ::System::Boolean NewDataSet::actionsRow::IsEXML_IdNull() {
    return this->IsNull(this->tableactions->EXML_IdColumn);
}

inline ::System::Void NewDataSet::actionsRow::SetEXML_IdNull() {
    this[this->tableactions->EXML_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::blocksRow^  >^  NewDataSet::actionsRow::GetblocksRows() {
    if (this->Table->ChildRelations[L"actions_blocks"] == nullptr) {
        return gcnew cli::array< NewDataSet::blocksRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::blocksRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"actions_blocks"])));
    }
}


inline NewDataSet::blocksRow::blocksRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableblocks = (cli::safe_cast<NewDataSet::blocksDataTable^  >(this->Table));
}

inline System::Int32 NewDataSet::blocksRow::blocks_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableblocks->blocks_IdColumn]));
}
inline System::Void NewDataSet::blocksRow::blocks_Id::set(System::Int32 value) {
    this[this->tableblocks->blocks_IdColumn] = value;
}

inline System::Int32 NewDataSet::blocksRow::actions_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableblocks->actions_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'actions_Id\' in table \'blocks\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::blocksRow::actions_Id::set(System::Int32 value) {
    this[this->tableblocks->actions_IdColumn] = value;
}

inline NewDataSet::actionsRow^  NewDataSet::blocksRow::actionsRow::get() {
    return (cli::safe_cast<NewDataSet::actionsRow^  >(this->GetParentRow(this->Table->ParentRelations[L"actions_blocks"])));
}
inline System::Void NewDataSet::blocksRow::actionsRow::set(NewDataSet::actionsRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"actions_blocks"]);
}

inline ::System::Boolean NewDataSet::blocksRow::Isactions_IdNull() {
    return this->IsNull(this->tableblocks->actions_IdColumn);
}

inline ::System::Void NewDataSet::blocksRow::Setactions_IdNull() {
    this[this->tableblocks->actions_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::blockRow^  >^  NewDataSet::blocksRow::GetblockRows() {
    if (this->Table->ChildRelations[L"blocks_block"] == nullptr) {
        return gcnew cli::array< NewDataSet::blockRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::blockRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"blocks_block"])));
    }
}


inline NewDataSet::blockRow::blockRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableblock = (cli::safe_cast<NewDataSet::blockDataTable^  >(this->Table));
}

inline System::Int64 NewDataSet::blockRow::ID::get() {
    try {
        return (cli::safe_cast<::System::Int64 >(this[this->tableblock->IDColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ID\' in table \'block\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::blockRow::ID::set(System::Int64 value) {
    this[this->tableblock->IDColumn] = value;
}

inline System::String^  NewDataSet::blockRow::name::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableblock->nameColumn]));
}
inline System::Void NewDataSet::blockRow::name::set(System::String^  value) {
    this[this->tableblock->nameColumn] = value;
}

inline System::Int64 NewDataSet::blockRow::block_number::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tableblock->block_numberColumn]));
}
inline System::Void NewDataSet::blockRow::block_number::set(System::Int64 value) {
    this[this->tableblock->block_numberColumn] = value;
}

inline System::Int64 NewDataSet::blockRow::nr_of_trials::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tableblock->nr_of_trialsColumn]));
}
inline System::Void NewDataSet::blockRow::nr_of_trials::set(System::Int64 value) {
    this[this->tableblock->nr_of_trialsColumn] = value;
}

inline System::Int64 NewDataSet::blockRow::nr_of_internal_triggers::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tableblock->nr_of_internal_triggersColumn]));
}
inline System::Void NewDataSet::blockRow::nr_of_internal_triggers::set(System::Int64 value) {
    this[this->tableblock->nr_of_internal_triggersColumn] = value;
}

inline System::Int64 NewDataSet::blockRow::nr_of_external_triggers::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tableblock->nr_of_external_triggersColumn]));
}
inline System::Void NewDataSet::blockRow::nr_of_external_triggers::set(System::Int64 value) {
    this[this->tableblock->nr_of_external_triggersColumn] = value;
}

inline System::Int32 NewDataSet::blockRow::block_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableblock->block_IdColumn]));
}
inline System::Void NewDataSet::blockRow::block_Id::set(System::Int32 value) {
    this[this->tableblock->block_IdColumn] = value;
}

inline System::Int32 NewDataSet::blockRow::blocks_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableblock->blocks_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'blocks_Id\' in table \'block\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::blockRow::blocks_Id::set(System::Int32 value) {
    this[this->tableblock->blocks_IdColumn] = value;
}

inline NewDataSet::blocksRow^  NewDataSet::blockRow::blocksRow::get() {
    return (cli::safe_cast<NewDataSet::blocksRow^  >(this->GetParentRow(this->Table->ParentRelations[L"blocks_block"])));
}
inline System::Void NewDataSet::blockRow::blocksRow::set(NewDataSet::blocksRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"blocks_block"]);
}

inline ::System::Boolean NewDataSet::blockRow::IsIDNull() {
    return this->IsNull(this->tableblock->IDColumn);
}

inline ::System::Void NewDataSet::blockRow::SetIDNull() {
    this[this->tableblock->IDColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::blockRow::Isblocks_IdNull() {
    return this->IsNull(this->tableblock->blocks_IdColumn);
}

inline ::System::Void NewDataSet::blockRow::Setblocks_IdNull() {
    this[this->tableblock->blocks_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::objectRow^  >^  NewDataSet::blockRow::GetobjectRows() {
    if (this->Table->ChildRelations[L"block_object"] == nullptr) {
        return gcnew cli::array< NewDataSet::objectRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::objectRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"block_object"])));
    }
}

inline cli::array< NewDataSet::loopsRow^  >^  NewDataSet::blockRow::GetloopsRows() {
    if (this->Table->ChildRelations[L"block_loops"] == nullptr) {
        return gcnew cli::array< NewDataSet::loopsRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::loopsRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"block_loops"])));
    }
}


inline NewDataSet::loopsRow::loopsRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableloops = (cli::safe_cast<NewDataSet::loopsDataTable^  >(this->Table));
}

inline System::Int32 NewDataSet::loopsRow::loops_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableloops->loops_IdColumn]));
}
inline System::Void NewDataSet::loopsRow::loops_Id::set(System::Int32 value) {
    this[this->tableloops->loops_IdColumn] = value;
}

inline System::Int32 NewDataSet::loopsRow::block_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableloops->block_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'block_Id\' in table \'loops\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::loopsRow::block_Id::set(System::Int32 value) {
    this[this->tableloops->block_IdColumn] = value;
}

inline NewDataSet::blockRow^  NewDataSet::loopsRow::blockRow::get() {
    return (cli::safe_cast<NewDataSet::blockRow^  >(this->GetParentRow(this->Table->ParentRelations[L"block_loops"])));
}
inline System::Void NewDataSet::loopsRow::blockRow::set(NewDataSet::blockRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"block_loops"]);
}

inline ::System::Boolean NewDataSet::loopsRow::Isblock_IdNull() {
    return this->IsNull(this->tableloops->block_IdColumn);
}

inline ::System::Void NewDataSet::loopsRow::Setblock_IdNull() {
    this[this->tableloops->block_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::loopRow^  >^  NewDataSet::loopsRow::GetloopRows() {
    if (this->Table->ChildRelations[L"loops_loop"] == nullptr) {
        return gcnew cli::array< NewDataSet::loopRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::loopRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"loops_loop"])));
    }
}


inline NewDataSet::loopRow::loopRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableloop = (cli::safe_cast<NewDataSet::loopDataTable^  >(this->Table));
}

inline System::Int64 NewDataSet::loopRow::ID::get() {
    try {
        return (cli::safe_cast<::System::Int64 >(this[this->tableloop->IDColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ID\' in table \'loop\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::loopRow::ID::set(System::Int64 value) {
    this[this->tableloop->IDColumn] = value;
}

inline System::String^  NewDataSet::loopRow::name::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableloop->nameColumn]));
}
inline System::Void NewDataSet::loopRow::name::set(System::String^  value) {
    this[this->tableloop->nameColumn] = value;
}

inline System::Int64 NewDataSet::loopRow::loop_number::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tableloop->loop_numberColumn]));
}
inline System::Void NewDataSet::loopRow::loop_number::set(System::Int64 value) {
    this[this->tableloop->loop_numberColumn] = value;
}

inline System::Int64 NewDataSet::loopRow::nr_of_loops::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tableloop->nr_of_loopsColumn]));
}
inline System::Void NewDataSet::loopRow::nr_of_loops::set(System::Int64 value) {
    this[this->tableloop->nr_of_loopsColumn] = value;
}

inline System::Int64 NewDataSet::loopRow::target_block::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tableloop->target_blockColumn]));
}
inline System::Void NewDataSet::loopRow::target_block::set(System::Int64 value) {
    this[this->tableloop->target_blockColumn] = value;
}

inline System::Int32 NewDataSet::loopRow::loops_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableloop->loops_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'loops_Id\' in table \'loop\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::loopRow::loops_Id::set(System::Int32 value) {
    this[this->tableloop->loops_IdColumn] = value;
}

inline NewDataSet::loopsRow^  NewDataSet::loopRow::loopsRow::get() {
    return (cli::safe_cast<NewDataSet::loopsRow^  >(this->GetParentRow(this->Table->ParentRelations[L"loops_loop"])));
}
inline System::Void NewDataSet::loopRow::loopsRow::set(NewDataSet::loopsRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"loops_loop"]);
}

inline ::System::Boolean NewDataSet::loopRow::IsIDNull() {
    return this->IsNull(this->tableloop->IDColumn);
}

inline ::System::Void NewDataSet::loopRow::SetIDNull() {
    this[this->tableloop->IDColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::loopRow::Isloops_IdNull() {
    return this->IsNull(this->tableloop->loops_IdColumn);
}

inline ::System::Void NewDataSet::loopRow::Setloops_IdNull() {
    this[this->tableloop->loops_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::finalizationsRow::finalizationsRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablefinalizations = (cli::safe_cast<NewDataSet::finalizationsDataTable^  >(this->Table));
}

inline System::Int32 NewDataSet::finalizationsRow::finalizations_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablefinalizations->finalizations_IdColumn]));
}
inline System::Void NewDataSet::finalizationsRow::finalizations_Id::set(System::Int32 value) {
    this[this->tablefinalizations->finalizations_IdColumn] = value;
}

inline System::Int32 NewDataSet::finalizationsRow::EXML_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablefinalizations->EXML_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'EXML_Id\' in table \'finalizations\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::finalizationsRow::EXML_Id::set(System::Int32 value) {
    this[this->tablefinalizations->EXML_IdColumn] = value;
}

inline NewDataSet::EXMLRow^  NewDataSet::finalizationsRow::EXMLRow::get() {
    return (cli::safe_cast<NewDataSet::EXMLRow^  >(this->GetParentRow(this->Table->ParentRelations[L"EXML_finalizations"])));
}
inline System::Void NewDataSet::finalizationsRow::EXMLRow::set(NewDataSet::EXMLRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"EXML_finalizations"]);
}

inline ::System::Boolean NewDataSet::finalizationsRow::IsEXML_IdNull() {
    return this->IsNull(this->tablefinalizations->EXML_IdColumn);
}

inline ::System::Void NewDataSet::finalizationsRow::SetEXML_IdNull() {
    this[this->tablefinalizations->EXML_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::finalizationRow^  >^  NewDataSet::finalizationsRow::GetfinalizationRows() {
    if (this->Table->ChildRelations[L"finalizations_finalization"] == nullptr) {
        return gcnew cli::array< NewDataSet::finalizationRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::finalizationRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"finalizations_finalization"])));
    }
}


inline NewDataSet::finalizationRow::finalizationRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablefinalization = (cli::safe_cast<NewDataSet::finalizationDataTable^  >(this->Table));
}

inline System::Int64 NewDataSet::finalizationRow::ID::get() {
    try {
        return (cli::safe_cast<::System::Int64 >(this[this->tablefinalization->IDColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ID\' in table \'finalization\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::finalizationRow::ID::set(System::Int64 value) {
    this[this->tablefinalization->IDColumn] = value;
}

inline System::Int32 NewDataSet::finalizationRow::finalization_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablefinalization->finalization_IdColumn]));
}
inline System::Void NewDataSet::finalizationRow::finalization_Id::set(System::Int32 value) {
    this[this->tablefinalization->finalization_IdColumn] = value;
}

inline System::Int32 NewDataSet::finalizationRow::finalizations_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablefinalization->finalizations_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'finalizations_Id\' in table \'finalization\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::finalizationRow::finalizations_Id::set(System::Int32 value) {
    this[this->tablefinalization->finalizations_IdColumn] = value;
}

inline NewDataSet::finalizationsRow^  NewDataSet::finalizationRow::finalizationsRow::get() {
    return (cli::safe_cast<NewDataSet::finalizationsRow^  >(this->GetParentRow(this->Table->ParentRelations[L"finalizations_finalization"])));
}
inline System::Void NewDataSet::finalizationRow::finalizationsRow::set(NewDataSet::finalizationsRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"finalizations_finalization"]);
}

inline ::System::Boolean NewDataSet::finalizationRow::IsIDNull() {
    return this->IsNull(this->tablefinalization->IDColumn);
}

inline ::System::Void NewDataSet::finalizationRow::SetIDNull() {
    this[this->tablefinalization->IDColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::finalizationRow::Isfinalizations_IdNull() {
    return this->IsNull(this->tablefinalization->finalizations_IdColumn);
}

inline ::System::Void NewDataSet::finalizationRow::Setfinalizations_IdNull() {
    this[this->tablefinalization->finalizations_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::objectRow^  >^  NewDataSet::finalizationRow::GetobjectRows() {
    if (this->Table->ChildRelations[L"finalization_object"] == nullptr) {
        return gcnew cli::array< NewDataSet::objectRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::objectRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"finalization_object"])));
    }
}


inline NewDataSet::EXMLRowChangeEvent::EXMLRowChangeEvent(NewDataSet::EXMLRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::EXMLRow^  NewDataSet::EXMLRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::EXMLRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::definesRowChangeEvent::definesRowChangeEvent(NewDataSet::definesRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::definesRow^  NewDataSet::definesRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::definesRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::experimentRowChangeEvent::experimentRowChangeEvent(NewDataSet::experimentRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::experimentRow^  NewDataSet::experimentRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::experimentRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::declarationsRowChangeEvent::declarationsRowChangeEvent(NewDataSet::declarationsRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::declarationsRow^  NewDataSet::declarationsRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::declarationsRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::objectRowChangeEvent::objectRowChangeEvent(NewDataSet::objectRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::objectRow^  NewDataSet::objectRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::objectRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::definitionsRowChangeEvent::definitionsRowChangeEvent(NewDataSet::definitionsRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::definitionsRow^  NewDataSet::definitionsRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::definitionsRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::definitionRowChangeEvent::definitionRowChangeEvent(NewDataSet::definitionRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::definitionRow^  NewDataSet::definitionRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::definitionRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::connectionsRowChangeEvent::connectionsRowChangeEvent(NewDataSet::connectionsRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::connectionsRow^  NewDataSet::connectionsRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::connectionsRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::connectionRowChangeEvent::connectionRowChangeEvent(NewDataSet::connectionRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::connectionRow^  NewDataSet::connectionRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::connectionRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::sourceRowChangeEvent::sourceRowChangeEvent(NewDataSet::sourceRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::sourceRow^  NewDataSet::sourceRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::sourceRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::targetRowChangeEvent::targetRowChangeEvent(NewDataSet::targetRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::targetRow^  NewDataSet::targetRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::targetRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::initializationsRowChangeEvent::initializationsRowChangeEvent(NewDataSet::initializationsRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::initializationsRow^  NewDataSet::initializationsRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::initializationsRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::initializationRowChangeEvent::initializationRowChangeEvent(NewDataSet::initializationRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::initializationRow^  NewDataSet::initializationRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::initializationRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::actionsRowChangeEvent::actionsRowChangeEvent(NewDataSet::actionsRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::actionsRow^  NewDataSet::actionsRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::actionsRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::blocksRowChangeEvent::blocksRowChangeEvent(NewDataSet::blocksRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::blocksRow^  NewDataSet::blocksRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::blocksRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::blockRowChangeEvent::blockRowChangeEvent(NewDataSet::blockRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::blockRow^  NewDataSet::blockRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::blockRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::loopsRowChangeEvent::loopsRowChangeEvent(NewDataSet::loopsRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::loopsRow^  NewDataSet::loopsRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::loopsRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::loopRowChangeEvent::loopRowChangeEvent(NewDataSet::loopRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::loopRow^  NewDataSet::loopRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::loopRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::finalizationsRowChangeEvent::finalizationsRowChangeEvent(NewDataSet::finalizationsRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::finalizationsRow^  NewDataSet::finalizationsRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::finalizationsRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::finalizationRowChangeEvent::finalizationRowChangeEvent(NewDataSet::finalizationRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::finalizationRow^  NewDataSet::finalizationRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::finalizationRowChangeEvent::Action::get() {
    return this->eventAction;
}
